var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html","title":"Building a registration form","text":""},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#1-tags","title":"1. Tags","text":"<ul> <li>Welcome to the Registration Form project! Start by adding the !DOCTYPE html declaration at the top of the document so the browser knows what type of document it's reading.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#2","title":"2","text":"<ul> <li>Below the DOCTYPE, add an html element with a lang attribute set to en, so that you have a place to start putting some code.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;/html&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#3","title":"3","text":"<ul> <li>Next, add opening and closing head and body tags within the html element.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#4","title":"4","text":"<ul> <li>Add a title and meta element inside the head element. Give your project a title of Registration Form, and add the charset attribute with a value of utf-8 to your meta element.</li> </ul> <pre><code>&lt;head&gt;\n    &lt;title&gt;Registration Form&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#5","title":"5","text":"<ul> <li>Nest a link element within the head element. Give it a rel attribute with a value of stylesheet and an href attribute with a value of styles.css.</li> </ul> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Registration Form&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#6","title":"6","text":"<ul> <li>Within the body, provide a heading context for the content, by adding an h1 with the text Registration Form.</li> </ul> <pre><code>&lt;body&gt;\n&lt;h1&gt;Registration Form&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#7","title":"7","text":"<ul> <li>Below the heading, use the following text within a paragraph element to encourage users to register:</li> </ul> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Registration Form&lt;/h1&gt;\n    &lt;p&gt; Please fill out this form with the required information&lt;/p&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#8","title":"8","text":"<ul> <li> <p>The vh unit stands for viewport height, and is equal to 1% of the height of the viewport. This makes it relative to the viewport height.</p> </li> <li> <p>It is time to spruce the project up with some CSS. Begin by giving the body a width of 100%, and a height of 100vh.</p> </li> </ul> <pre><code>body {\n  width: 100%;\n  height: 100vh;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#9","title":"9","text":"<ul> <li>Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0.</li> </ul> <pre><code>body {\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#10","title":"10","text":"<ul> <li>As suggested by the title, you are creating a form. So, after the p element, insert a form with an action attribute targeting https://register-demo.freecodecamp.org.</li> </ul> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Registration Form&lt;/h1&gt;\n    &lt;p&gt;Please fill out this form with the required information&lt;/p&gt;\n    &lt;form action=\"https://register-demo.freecodecamp.org\"&gt;&lt;/form&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#11","title":"11","text":"<ul> <li>As suggested by the title, you are creating a form. So, after the p element, insert a form with an action attribute targeting https://register-demo.freecodecamp.org.</li> </ul> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Registration Form&lt;/h1&gt;\n    &lt;p&gt;Please fill out this form with the required information&lt;/p&gt;\n    &lt;form action=\"https://register-demo.freecodecamp.org\"&gt;&lt;/form&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#12","title":"12","text":"<ul> <li> <p>The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL parameters (with method=\"get\") or via a POST request as data in the request body (with method=\"post\").</p> </li> <li> <p>Set the method attribute to send your form data via a POST request.</p> </li> </ul> <pre><code>&lt;form action='https://register-demo.freecodecamp.org' method=\"POST\"&gt;&lt;/form&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#13","title":"13","text":"<ul> <li>As the form will have three distinct sections, add three fieldset elements within the form element.</li> </ul> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Registration Form&lt;/h1&gt;\n    &lt;p&gt;Please fill out this form with the required information&lt;/p&gt;\n    &lt;form method=\"post\" action='https://register-demo.freecodecamp.org'&gt;\n    &lt;fieldset&gt; &lt;/fieldset&gt;\n    &lt;fieldset&gt; &lt;/fieldset&gt;\n    &lt;fieldset&gt; &lt;/fieldset&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#14","title":"14","text":"<ul> <li>The first fieldset will hold name, email, and password fields. Start by adding four label elements to the first fieldset</li> </ul> <pre><code>&lt;form method=\"post\" action='https://register-demo.freecodecamp.org'&gt;\n      &lt;fieldset&gt;\n        &lt;label&gt;&lt;/label&gt;\n        &lt;label&gt;&lt;/label&gt;\n        &lt;label&gt;&lt;/label&gt;\n        &lt;label&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n    &lt;/form&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#15","title":"15","text":"<ul> <li>Add the following text to the label elements:</li> </ul> <p>Enter Your First Name: Enter Your Last Name: Enter Your Email: Create a New Password:</p> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt; Enter Your First Name:&lt;/label&gt;\n        &lt;label&gt;Enter Your Last Name:&lt;/label&gt;\n        &lt;label&gt;Enter Your Email:&lt;/label&gt;\n        &lt;label&gt;Create a New Password:&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#16","title":"16","text":"<ul> <li>The rem unit stands for root em, and is relative to the font size of the html element.</li> </ul> <p>As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.</p> <pre><code> label {\n  display: block;\n  margin: 0.5rem 0\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#17","title":"17","text":"<ul> <li>Nest an input element within each label. Be sure to add each input after the label text, and include a space after the colon.</li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Enter Your First Name: &lt;input&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label&gt;Enter Your Last Name: &lt;input&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label&gt;Enter Your Email: &lt;input&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label&gt;Create a New Password: &lt;input&gt;&lt;/input&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#18","title":"18","text":"<ul> <li> <p>Following accessibility best practices, link the input elements and the label elements together using the for attribute.</p> </li> <li> <p>Use first-name, last-name, email, and new-password as values for the respective id attributes.</p> </li> </ul> <pre><code> &lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\"&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\"&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\"&gt;&lt;/input&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\"&gt;&lt;/input&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#19","title":"19","text":"<ul> <li> <p>Specifying the type attribute of a form element is important for the browser to know what kind of data it should expect. If the type is not specified, the browser will default to text.</p> </li> <li> <p>Give the first two input elements a type attribute of text, the third a type attribute of email, and the fourth a type attribute of password.</p> </li> <li> <p>The email type only allows emails with a @ and a . in the domain. The password type obscures the input, and warns if the site does not use HTTPS.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\" /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#20","title":"20","text":"<ul> <li> <p>The first input element with a type of submit is automatically set to submit its nearest parent form element.</p> </li> <li> <p>To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\" /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n      &lt;input type=\"submit\" value=\"Submit\"&gt; &lt;/input&gt;\n ```\n\n## 21\n\n- At this point, you should be able to submit the form. However, you might notice not much happens.\n\n- To make the form more interactive, add the required attribute to the input elements in the first fieldset.\n\n- Now, if you try to submit the form without filling in the required fields, you will see an error message.\n\n```html\n&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\" required=\"\" /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" required=\"\" /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" required=\"\" /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\" required=\"\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n      &lt;fieldset&gt;&lt;/fieldset&gt;\n      &lt;input type=\"submit\" value=\"Submit\" /&gt;\n ```\n\n## 22\n\n- Certain type attribute values come with built-in form validation. For example, type=\"email\" requires that the value be a valid email address.\n\n- Add custom validation to the password input element, by adding a minlength attribute with a value of 8. Doing so prevents inputs of less than 8 characters being submitted.\n\n```html\n&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\" required minlength=\"8\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n ```\n\n## 23\n\n- With type=\"password\" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.\n\n- Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}\n\n- The above is a regular expression which matches eight or more lowercase letters or the digits 0 to 5. Then, remove the minlength attribute, and try it out.\n\n```html\n&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\"  pattern=\"[a-z0-5]{8,}\" required  /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n ```\n\n## 24\n\n- Let us go to the next part of the registration form. This section will ask for the type of account the user is opening.\n\n- Start by adding two label elements to the second fieldset.\n\n```html\n&lt;fieldset&gt;\n        &lt;label&gt;&lt;/label&gt;\n        &lt;label&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n ```\n\n## 25\n\n- Users will be allowed to choose either a Personal or Business.\n\n- To do this, within each of the first two label elements, add one input element with type=\"radio\".\n\n```html\n&lt;fieldset&gt;\n        &lt;label&gt; &lt;input type=\"radio\" /&gt;&lt;/label&gt;\n        &lt;label&gt; &lt;input type=\"radio\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n ```\n\n## 26\n\n- Within each corresponding label element, and immediately after the input element, add a space and add the following text:\n\nExample Code\nPersonal\nBusiness\n\n```html\n&lt;label&gt;&lt;input type=\"radio\" /&gt; Personal&lt;/label&gt;\n        &lt;label&gt;&lt;input type=\"radio\" /&gt; Business&lt;/label&gt;\n ```\n\n## 27\n\n- You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related.\n\n- To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time.\n\n```html\n  &lt;fieldset&gt;\n        &lt;label&gt;&lt;input type=\"radio\" name=\"account-type\" /&gt; Personal&lt;/label&gt;\n        &lt;label&gt;&lt;input type=\"radio\" name=\"account-type\" /&gt; Business&lt;/label&gt;\n      &lt;/fieldset&gt;\n ```\n\n## 28\n\n- Currently users can submit the form without checking the radio inputs. Although you previously used the required attribute to indicate that an input is required, it won't work in this case because adding required to both inputs will convey the wrong information to users.\n\n- To solve this, you can provide context of what is needed by adding a legend element with text Account type (required) before the label elements within the second fieldset. Then add the checked attribute to the Personal input to ensure the form is submitted with the required data in it.\n\n```html\n&lt;fieldset&gt;\n        &lt;legend&gt;Account type (required)&lt;/legend&gt;\n        &lt;label&gt;&lt;input type=\"radio\" name=\"account-type\" checked /&gt; Personal&lt;/label&gt;\n        &lt;label&gt;&lt;input type=\"radio\" name=\"account-type\" /&gt; Business&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#29","title":"29","text":"<ul> <li> <p>Follow accessibility best practices by linking the input elements and the label elements in the second fieldset.</p> </li> <li> <p>Use personal-account, and business-account as values for the respective id attributes.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;legend&gt;Account type (required)&lt;/legend&gt;\n        &lt;label for=\"personal-account\"&gt;&lt;input type=\"radio\" name=\"account-type\" id=\"personal-account\" checked /&gt; Personal&lt;/label&gt;\n        &lt;label for=\"business-account\"&gt;&lt;input type=\"radio\" name=\"account-type\" id=\"business-account\" /&gt; Business&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#30","title":"30","text":"<ul> <li> <p>You need to confirm that the user has read the terms and conditions.</p> </li> <li> <p>Add a label element. Inside the newly created label element add an input element and set the type attribute to checkbox. Make this input element required so users can not sign up without agreeing to the terms and conditions.</p> </li> <li> <p>Add an id and for attribute with the value terms-and-conditions to the elements for accessibility.</p> </li> </ul> <pre><code>&lt;label for=\"terms-and-conditions\"&gt;\n  &lt;input type=\"checkbox\" required id=\"terms-and-conditions\" /&gt;\n  &lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#31","title":"31","text":"<ul> <li>Add the text I accept the terms and conditions immediately after the input element in the newly added label. Then link the text terms and conditions to the following location:</li> </ul> <p>Example Code https://www.freecodecamp.org/news/terms-of-service/</p> <pre><code>&lt;label for=\"terms-and-conditions\"&gt;&lt;input id=\"terms-and-conditions\" type=\"checkbox\" required /&gt;I accept the &lt;a href=\"https://www.freecodecamp.org/news/terms-of-service/\"&gt;terms and conditions&lt;/a&gt;&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#32","title":"32","text":"<ul> <li> <p>Moving on to the final fieldset. What if you wanted to allow a user to upload a profile picture?</p> </li> <li> <p>Well, the input type file allows just that. Add a label with the text Upload a profile picture: , and nest an input accepting a file upload.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt; &lt;input type=\"file\" /&gt;Upload a profile picture: &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#33","title":"33","text":"<ul> <li> <p>Add another label after the first, with the text Input your age (years): . Then, nest an input with the type of number.</p> </li> <li> <p>Next, add a min attribute to the input with a value of 13 because users under the age of 13 should not register. Also, users probably will not be over the age of 120; add a max attribute with a value of 120.</p> </li> <li> <p>Now, if someone tries to submit the form with values outside of the range, a warning will appear, and the form will not submit. Give it a try.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt; Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#34","title":"34","text":"<ul> <li> <p>Adding a dropdown to the form is easy with the select element. The select element is a container for a group of option elements, and the option element acts as a label for each dropdown option. Both elements require closing tags.</p> </li> <li> <p>Start by adding a select element below the two label elements. Then nest 5 option elements within the select element.</p> </li> </ul> <pre><code> &lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;select&gt;\n          &lt;option&gt; &lt;/option&gt;\n          &lt;option&gt; &lt;/option&gt;\n          &lt;option&gt; &lt;/option&gt;\n          &lt;option&gt; &lt;/option&gt;\n          &lt;option&gt; &lt;/option&gt;\n          &lt;/select&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#35","title":"35","text":"<ul> <li>Nest the select element (with its option elements) within a label element with the text How did you hear about us?. The text should come before the select element.</li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label&gt;How did you hear about us?&lt;select&gt;&lt;/label&gt;\n          &lt;option&gt;&lt;/option&gt;\n          &lt;option&gt;&lt;/option&gt;\n          &lt;option&gt;&lt;/option&gt;\n          &lt;option&gt;&lt;/option&gt;\n          &lt;option&gt;&lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#36","title":"36","text":"<ul> <li>The dropdown options are currently empty. To give them content, add the following text to each subsequent option element:</li> </ul> <p>Example Code (select one) freeCodeCamp News freeCodeCamp YouTube Channel freeCodeCamp Forum Other</p> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label&gt;How did you hear about us?\n          &lt;select&gt;\n            &lt;option&gt;(select one)&lt;/option&gt;\n            &lt;option&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#37","title":"37","text":"<ul> <li> <p>Submitting the form with an option selected would not send a useful value to the server. As such, each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server.</p> </li> <li> <p>Give the first option a value of \"\", and the subsequent option elements value attributes from 1 to 4.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label&gt;How did you hear about us?\n          &lt;select&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#38","title":"38","text":"<ul> <li> <p>The textarea element acts like an input element of type text, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns.</p> </li> <li> <p>Users will be able to register with a bio. Add a label with the text Provide a bio: at the end of the fieldset. Add a textarea element inside the label element. Note that the textarea requires a closing tag.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label&gt;Upload a profile picture: &lt;input type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label&gt;How did you hear about us?\n          &lt;select&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;label&gt;Provide a bio:\n          &lt;textarea&gt;&lt;/textarea&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#39","title":"39","text":"<ul> <li> <p>Link the applicable form elements and their label elements together.</p> </li> <li> <p>Use profile-picture, age, referrer, and bio as values for the respective id attributes.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"profile-picture\"&gt;Upload a profile picture: &lt;input type=\"file\" id=\"profile-picture\" /&gt;&lt;/label&gt;\n        &lt;label for=\"age\"&gt;Input your age (years): &lt;input type=\"number\" min=\"13\" max=\"120\" id=\"age\" /&gt;&lt;/label&gt;\n        &lt;label for=\"referrer\"&gt;How did you hear about us?\n          &lt;select id=\"referrer\"&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;label for=\"bio\"&gt;Provide a bio:\n          &lt;textarea id=\"bio\"&gt;&lt;/textarea&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#40","title":"40","text":"<ul> <li> <p>The textarea appears too small. To give it an initial size, you can add the rows and cols attributes.</p> </li> <li> <p>Add an initial size of 3 rows and 30 columns.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"profile-picture\"&gt;Upload a profile picture: &lt;input id=\"profile-picture\" type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label for=\"age\"&gt;Input your age (years): &lt;input id=\"age\" type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label for=\"referrer\"&gt;How did you hear about us?\n          &lt;select id=\"referrer\"&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;label for=\"bio\"&gt;Provide a bio:\n          &lt;textarea id=\"bio\" rows=\"3\" cols=\"30\"&gt;&lt;/textarea&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#41","title":"41","text":"<ul> <li> <p>To give Campers an idea of what to put in their bio, the placeholder attribute is used. The placeholder accepts a text value, which is displayed until the user starts typing.</p> </li> <li> <p>Give the textarea a placeholder of I like coding on the beach....</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"profile-picture\"&gt;Upload a profile picture: &lt;input id=\"profile-picture\" type=\"file\" /&gt;&lt;/label&gt;\n        &lt;label for=\"age\"&gt;Input your age (years): &lt;input id=\"age\" type=\"number\" min=\"13\" max=\"120\" /&gt;&lt;/label&gt;\n        &lt;label for=\"referrer\"&gt;How did you hear about us?\n          &lt;select id=\"referrer\"&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;label for=\"bio\"&gt;Provide a bio:\n          &lt;textarea id=\"bio\" rows=\"3\" cols=\"30\" placeholder=\"I like coding on the beach...\"&gt;&lt;/textarea&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#42","title":"42","text":"<ul> <li> <p>With form submissions, it is useful, and good practice, to provide each submittable element with a name attribute. This attribute is used to identify the element in the form submission.</p> </li> <li> <p>Except for the two radio inputs (which you have already named), give each submittable element a unique name attribute of your choosing.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;label for=\"first-name\"&gt;Enter Your First Name: &lt;input id=\"first-name\" type=\"text\"  required name=\"first-name\" /&gt;&lt;/label&gt;\n        &lt;label for=\"last-name\"&gt;Enter Your Last Name: &lt;input id=\"last-name\" type=\"text\" required name=\"last-name\" /&gt;&lt;/label&gt;\n        &lt;label for=\"email\"&gt;Enter Your Email: &lt;input id=\"email\" type=\"email\" required name=\"email\" /&gt;&lt;/label&gt;\n        &lt;label for=\"new-password\"&gt;Create a New Password: &lt;input id=\"new-password\" type=\"password\" pattern=\"[a-z0-5]{8,}\" required name=\"password\" /&gt;&lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;fieldset&gt;\n        &lt;legend&gt;Account type (required)&lt;/legend&gt;\n        &lt;label for=\"personal-account\"&gt;&lt;input id=\"personal-account\" type=\"radio\" name=\"account-type\" checked /&gt; Personal&lt;/label&gt;\n        &lt;label for=\"business-account\"&gt;&lt;input id=\"business-account\" type=\"radio\" name=\"account-type\" /&gt; Business&lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;fieldset&gt;\n        &lt;label for=\"profile-picture\"&gt;Upload a profile picture: &lt;input id=\"profile-picture\" type=\"file\" name=\"profile-picture\" /&gt;&lt;/label&gt;\n        &lt;label for=\"age\"&gt;Input your age (years): &lt;input id=\"age\" type=\"number\" min=\"13\" max=\"120\" name=\"age\" /&gt;&lt;/label&gt;\n        &lt;label for=\"referrer\"&gt;How did you hear about us?\n          &lt;select id=\"referrer\" name=\"referrer\"&gt;\n            &lt;option value=\"\"&gt;(select one)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;freeCodeCamp News&lt;/option&gt;\n            &lt;option value=\"2\"&gt;freeCodeCamp YouTube Channel&lt;/option&gt;\n            &lt;option value=\"3\"&gt;freeCodeCamp Forum&lt;/option&gt;\n            &lt;option value=\"4\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;label for=\"bio\"&gt;Provide a bio:\n          &lt;textarea id =\"bio\" rows=\"3\" cols=\"30\" placeholder=\"I like coding on the beach...\" name=\"bio\"&gt;&lt;/textarea&gt;\n        &lt;/label&gt;\n      &lt;/fieldset&gt;\n      &lt;label for=\"terms-and-conditions\"&gt;\n        &lt;input id=\"terms-and-conditions\" type=\"checkbox\" required name=\"terms\" /&gt; I accept the &lt;a href=\"https://www.freecodecamp.org/news/terms-of-service/\"&gt;terms and conditions&lt;/a&gt;\n      &lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#43","title":"43","text":"<ul> <li> <p>The HTML for the registration form is finished. Now, you can spruce it up a bit.</p> </li> <li> <p>Start by changing the font to Tahoma, and the font size to 16px in the body.</p> </li> </ul> <pre><code>body {\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  background-color: #1b1b32;\n  color: #f5f6f7;\n  font-family: Tahoma;\n  font-size: 16px\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#44","title":"44","text":"<ul> <li>Center the h1 and p elements by giving them a margin of 1em auto. Then, align their text in the center as well.</li> </ul> <pre><code>h1, p {\n  margin: 1em auto;\n  text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#45","title":"45","text":"<ul> <li>Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw.</li> </ul> <pre><code>form {\n  margin: 0 auto;\n  min-width: 300px;\n  width: 60vw;\n  max-width: 500px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#46","title":"46","text":"<ul> <li> <p>During development, it is useful to see the fieldset default borders. However, they make the content appear too separated.</p> </li> <li> <p>Remove the border, and add 2rem of padding only to the top and bottom of each fieldset. Be sure to remove the padding from the left and right.</p> </li> </ul> <pre><code>fieldset {\n  border: 0;\n  padding-left:0;\n  padding-right:0;\n  padding-top:2rem;\n  padding-bottom:2rem;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#47","title":"47","text":"<ul> <li>To give the fieldset elements a bit of separation, select them and give them a border-bottom of 3px solid #3b3b4f.</li> </ul> <pre><code>fieldset {\n  border: none;\n  padding: 2rem 0;\n  border-bottom: 3px solid #3b3b4f;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#48","title":"48","text":"<ul> <li>The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:</li> </ul> <p>Example Code p:last-of-type { } That will select the last p element. Create a new selector that targets the last fieldset element and set its border-bottom to none.</p> <pre><code>fieldset:last-of-type {\n  border-bottom: none;\n }\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#49","title":"49","text":"<ul> <li> <p>It would be nicer to have the label text appear above the form elements.</p> </li> <li> <p>Select all input, textarea, and select elements, and make them take up the full width of their parent elements.</p> </li> <li> <p>Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.</p> </li> </ul> <pre><code>input, textarea, select {\n  width:100%;\n  margin-bottom: 0;\n  margin-top: 10px;\n  margin-left: 0;\n  margin-right: 0;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#50","title":"50","text":"<ul> <li> <p>For the second fieldset, you want the input and label text to appear on the same line.</p> </li> <li> <p>Start, by giving the input elements in the second fieldset a class of inline.</p> </li> </ul> <pre><code>&lt;fieldset&gt;\n        &lt;legend&gt;Account type (required)&lt;/legend&gt;\n        &lt;label for=\"personal-account\"&gt;&lt;input id=\"personal-account\" type=\"radio\" name=\"account-type\" class=\"inline\" checked /&gt; Personal&lt;/label&gt;\n        &lt;label for=\"business-account\"&gt;&lt;input id=\"business-account\" type=\"radio\" name=\"account-type\" class=\"inline\" /&gt; Business&lt;/label&gt;\n      &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#51","title":"51","text":"<ul> <li>Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.</li> </ul> <pre><code>.inline {\n  width: unset;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#52","title":"52","text":"<ul> <li>Add some space between the .inline elements and the label text, by giving a right margin of 0.5em. Also, set all the other margin to 0.</li> </ul> <pre><code>.inline {\n  width: unset;\n  margin-right: 0.5em;\n  margin-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#53","title":"53","text":"<ul> <li> <p>If you look close enough, you will notice the .inline elements are too high on the line.</p> </li> <li> <p>To combat this, set the vertical-align property to middle.</p> </li> </ul> <pre><code>.inline {\n  width: unset;\n  margin: 0 0.5em 0 0;\n  vertical-align: middle;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#54","title":"54","text":"<ul> <li>To make the input and textarea elements blend in with the background theme, set their background-color to #0a0a23. Then, give them a 1px, solid border with a color of #0a0a23.</li> </ul> <pre><code>input, textarea {\n  background-color: #0a0a23;\n  border: 1px solid #0a0a23;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#55","title":"55","text":"<ul> <li> <p>Currently, if you type in the input or textarea elements, you will not be able to see the text. Also, their height is too small to be easy to use.</p> </li> <li> <p>Fix this, by setting the color to #ffffff, and setting their min-height to 2em.</p> </li> </ul> <pre><code>input, textarea {\n  background-color: #0a0a23;\n  border: 1px solid #0a0a23;\n  color: #ffffff;\n  min-height: 2em;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#56","title":"56","text":"<ul> <li> <p>You want the select element to remain with a white background, but now it is not getting the same min-height as the input and textarea elements.</p> </li> <li> <p>Move the min-height property and value so that all three element types have the same min-height value, and the select element still has a white background.</p> </li> </ul> <pre><code>body {\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  background-color: #1b1b32;\n  color: #f5f6f7;\n  font-family: Tahoma;\n  font-size: 16px;\n}\n\nh1, p {\n  margin: 1em auto;\n  text-align: center;\n}\n\nform {\n  width: 60vw;\n  max-width: 500px;\n  min-width: 300px;\n  margin: 0 auto;\n}\n\nfieldset {\n  border: none;\n  padding: 2rem 0;\n  border-bottom: 3px solid #3b3b4f;\n}\n\nfieldset:last-of-type {\n  border-bottom: none;\n}\n\nlabel {\n  display: block;\n  margin: 0.5rem 0;\n}\n\ninput,\ntextarea,\nselect {\n  margin: 10px 0 0 0;\n  width: 100%;\n  min-height: 2em;\n}\n\ninput, textarea {\n  background-color: #0a0a23;\n  border: 1px solid #0a0a23;\n  color: #ffffff;\n}\n\n.inline {\n  width: unset;\n  margin: 0 0.5em 0 0;\n  vertical-align: middle;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#57","title":"57","text":"<ul> <li>To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example:</li> </ul> <p>Example Code input[name=\"password\"] The above selects input elements with a name attribute value of password.</p> <ul> <li>Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.</li> </ul> <pre><code>input[type=\"submit\"] {\n  display: block;\n  width: 60%;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#58","title":"58","text":"<ul> <li> <p>With a display of block the submit button sits flush against the left edge of its parent.</p> </li> <li> <p>Use the same technique used to center the form to center the submit button.</p> </li> </ul> <pre><code>input[type=\"submit\"] {\n  display: block;\n  width: 60%;\n  margin: 0 auto;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#59","title":"59","text":"<ul> <li>To make the submit button look more in line with the rest of the form, give it the same height as the other fields (2em). Also, increase the font-size to 1.1rem.</li> </ul> <pre><code>input[type=\"submit\"] {\n  display: block;\n  width: 60%;\n  margin: 0 auto;\n  height: 2em;\n  font-size: 1.1rem;\n}\n ```\n\n## 60\n\n- To make the submit button appear more distinct, give it a background-color of #3b3b4f, and a border-color of white.\n\n```html\n\ninput[type=\"submit\"] {\n  display: block;\n  width: 60%;\n  margin: 0 auto;\n  height: 2em;\n  font-size: 1.1rem;\n  background-color:#3b3b4f;\n  border-color: white;\n}\n ```\n\n## 61\n\n- Lastly, for the submit button, you want to separate it from the fieldset above, and adjust its width to never be below 300px.\n\n- Change the margin property to include 1em on the top and bottom, while leaving the right and left margins set to auto. Then set the width as described above.\n\n```html\n\ninput[type=\"submit\"] {\n  display: block;\n  width: 60%;\n  margin: 0 auto;\n  height: 2em;\n  font-size: 1.1rem;\n  background-color: #3b3b4f;\n  border-color: white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  min-width: 300px;\n}\n\n ```\n\n## 62\n\n- Most browsers inject their own default CSS properties and values for different elements. If you look closely, you might be able to notice the file input is smaller than the other text input elements. By default, a padding of 1px 2px is given to input elements you can type in.\n\n- Using another attribute selector, style the input with a type of file to be the same padding as the other input elements.\n\n```html\n\ninput[type=\"file\"] {\n  padding: 1px 2px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#63","title":"63","text":"<ul> <li>Speaking of padding, the submit button is sitting at the bottom of the form element. Add 2em of padding only to the bottom of the form.</li> </ul> <pre><code>form {\n  width: 60vw;\n  max-width: 500px;\n  min-width: 300px;\n  margin: 0 auto;\n  padding: 2em;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#64","title":"64","text":"<ul> <li>Make the input for the terms and conditions inline by adding the appropriate class in the HTML.</li> </ul> <pre><code>&lt;label for=\"terms-and-conditions\"&gt;\n        &lt;input id=\"terms-and-conditions\" type=\"checkbox\" required name=\"terms-and-conditions\" class=\"inline\" /&gt; I accept the &lt;a href=\"https://www.freecodecamp.org/news/terms-of-service/\"&gt;terms and conditions&lt;/a&gt;\n      &lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#65","title":"65","text":"<ul> <li> <p>Lastly change the text color of the terms and conditions link element to #dfdfe2 by adding a new selector in the CSS.</p> </li> <li> <p>Well done! You have completed the final part of the Registration Form practice project.</p> </li> </ul> <pre><code>a {\n  color: #dfdfe2;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingregristrationform.html#66","title":"66","text":"<ul> <li> <p>Now you'll apply a gradient to the blue marker, this time using the hsl function as color arguments.</p> </li> <li> <p>In the .blue CSS rule, change the background-color property to background.</p> </li> </ul> <pre><code>.blue {\n  background: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html","title":"Building set of markers","text":""},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#1-tags","title":"1. Tags","text":"<ul> <li> <p>As you've seen in the previous projects, webpages should start with a DOCTYPE html declaration, followed by an html element.</p> </li> <li> <p>Add a DOCTYPE html declaration at the top of the document, and an html element after that. Give the html element a lang attribute with en as its value.</p> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#2","title":"2","text":"<pre><code>- Nest a head element within the html element. Just after the head element, add a body element.\n\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#3","title":"3","text":"<ul> <li> <p>Remember that the title element gives search engines extra information about the page. It also displays the content of that title element in two more ways:</p> </li> <li> <p>in the title bar when the page is open</p> </li> <li>in the browser tab for the page when you hover on it. Even if that tab is not active, once you hover on the tab, the title text is displayed.</li> <li>Within the head element, nest a title element with the text Colored Markers.</li> </ul> <pre><code>&lt;head&gt;\n    &lt;title&gt; Colored Markers &lt;/title&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#4","title":"4","text":"<pre><code>The charset attribute specifies the character encoding used by the document. utf-8 (Unicode Transformation Format \u2013 8-bit) is a character encoding standard used for electronic communication.\n\nInside the head element, nest a meta element with the attribute charset set to \"utf-8\".\n\n&lt;head&gt;\n    &lt;title&gt;Colored Markers&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#5","title":"5","text":"<pre><code>- You can have multiple meta elements on a web page. Each meta element adds information about the page that cannot be expressed by other HTML elements.\n\nAdd another meta element within the head. Give it a name attribute set to \"viewport\" and a content attribute set to \"width=device-width, initial-scale=1.0\" so your page looks the same on all devices.\n\n&lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Colored Markers&lt;/title&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#6","title":"6","text":"<pre><code>- Now you're ready to start adding content to the page.\n\n- Within the body, nest an h1 element with the text CSS Color Markers.\n\n&lt;body&gt;\n    &lt;h1&gt; CSS Color Markers &lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#7","title":"7","text":"<pre><code>- In this project you'll work with an external CSS file to style the page. We've already created a styles.css file for you. But before you can use it, you'll need to link it to the page.\n\n- Nest a link element within the head element. Give it a rel attribute set to \"stylesheet\" and an href attribute set to \"styles.css\".\n\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Colored Markers&lt;/title&gt;\n  &lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#8","title":"8","text":"<pre><code>- Create a new CSS rule that targets the h1 element, and set its text-align property to center.\nh1 {\n  text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#9","title":"9","text":"<pre><code>- Now you'll add some elements that you'll eventually style into color markers.\n\n- First, within the body element, add a div element and set its class attribute to container. Make sure the div element is below the h1 element.\n\n&lt;body&gt;\n    &lt;h1&gt;CSS Color Markers&lt;/h1&gt;\n    &lt;div class=\"container\"&gt;&lt;/div&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#10","title":"10","text":"<ul> <li>Next, within the div element, add another div element and give it a class of marker.</li> </ul> <pre><code>&lt;body&gt;\n    &lt;h1&gt;CSS Color Markers&lt;/h1&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;div class=\"marker\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#11","title":"11","text":"<ul> <li> <p>It's time to add some color to the marker. Remember that one way to add color to an element is to use a color keyword like black, cyan, or yellow.</p> </li> <li> <p>As a reminder, here's how to target the class freecodecamp:</p> </li> </ul> <p>Example Code  .freecodecamp {</p> <p>}</p> <ul> <li>Create a new CSS rule that targets the class marker, and set its background-color property to red.</li> </ul> <pre><code>.marker {\n  background-color:red;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#12","title":"12","text":"<ul> <li> <p>The background color was applied, but since the marker div element has no content in it, it doesn't have any height by default.</p> </li> <li> <p>In your .marker CSS rule, set the height property to 25px and the width property to 200px</p> </li> </ul> <pre><code>.marker {\n  background-color: red;\n  height: 25px;\n  width: 200px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#13","title":"13","text":"<ul> <li> <p>Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.</p> </li> <li> <p>In the last project, you set the margin area of elements separately with properties like margin-top and margin-left. The margin shorthand property makes it easy to set multiple margin areas at the same time.</p> </li> <li> <p>To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.</p> </li> </ul> <pre><code>.marker {\n  width: 200px;\n  height: 25px;\n  background-color: red;\n  margin: auto;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#14","title":"14","text":"<ul> <li>This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.</li> </ul> <pre><code>&lt;div class=\"container\"&gt;\n      &lt;div class=\"marker\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker\"&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#15","title":"15","text":"<ul> <li> <p>While you have three separate marker div elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.</p> </li> <li> <p>When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.</p> </li> <li> <p>In your .marker CSS rule, set the margin property to 10px auto.</p> </li> </ul> <pre><code>.marker {\n  width: 200px;\n  height: 25px;\n  background-color: red;\n  margin: 10px auto;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#16","title":"16","text":"<ul> <li>To give the markers different colors, you will need to add a unique class to each one. Multiple classes can be added to an element by listing them in the class attribute and separating them with a space. For example, the following adds both the animal and dog classes to a div element.</li> </ul> <p>Example Code</p> <pre><code>&lt;div class=\"animal dog\"&gt;\n</code></pre> <p>If you add multiple classes to an HTML element, the styles of the first classes you list may be overridden by later classes.</p> <p>To begin, add the class one to the first marker div element.</p> <pre><code> &lt;div class=\"marker one\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker\"&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#17","title":"17","text":"<ul> <li>Next, remove the background-color property and its value from the .marker CSS rule.</li> </ul> <pre><code>.marker {\n  width: 200px;\n  height: 25px;\n  margin: 10px auto;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#18","title":"18","text":"<ul> <li>Then, create a new CSS rule that targets the class one and set its background-color property to red.</li> </ul> <pre><code>.one {\n  background-color:red;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#19","title":"19","text":"<ul> <li>Add the class two to the second marker div, and add the class three to the third marker div.</li> </ul> <pre><code>&lt;div class=\"marker one\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker two\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker three\"&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#20","title":"20","text":"<ul> <li> <p>Create a CSS rule that targets the class two and set its background-color property to green.</p> </li> <li> <p>Also, create a separate CSS rule that targets the class three and set its background-color to blue.</p> </li> </ul> <pre><code>.two {\n  background-color: green;\n}\n\n.three {\n  background-color: blue;\n}\n ```\n\n## 21\n\n- There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.\n\n- In this project, you'll work with the RGB model. This means that colors begin as black, and change as different levels of red, green, and blue are introduced. An easy way to see this is with the CSS rgb function.\n\n- Create a new CSS rule that targets the class container and set its background-color to black with rgb(0, 0, 0).\n\n```html\n.container{\n  background-color: rgb(0, 0, 0);\n}\n ```\n\n## 22\n\n```html\n- A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:\n\nExample Code\n- rgb(red, green, blue);\n- Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.\n\n- In the .one CSS rule, replace the color keyword red with the rgb function. For the rgb function, set the value for red to 255, the value for green to 0, and the value for blue to 0.\n\n.one {\n  background-color: rgb(255, 0, 0);\n}\n ```\n\n## 23\n\n```html\n- Notice that the background-color for your marker is still red. This is because you set the red value of the rgb function to the max of 255, or 100% red, and set both the green and blue values to 0.\n\nNow use the rgb function to set the other colors.\n\nIn the .two CSS rule, use the rgb function to set the background-color to the max value for green, and 0 for the other values. And in the .three CSS rule, use the rgb function to set the background-color to the max value for blue, and 0 for the other values.\n\n.two {\n  background-color: rgb(0, 255, 0);\n}\n\n.three {\n  background-color: rgb(0, 0, 255);\n}\n ```\n\n## 24\n\n- While the red and blue markers look the same, the green one is much lighter than it was before. This is because the green color keyword is actually a darker shade, and is about halfway between black and the maximum value for green.\n\n- In the .two CSS rule, set the green value in the rgb function to 127 to lower its intensity.\n\n```html\n.two {\n  background-color: rgb(0, 127, 0);\n}\n ```\n\n## 25\n\n- Now add a little more vertical space between your markers and the edge of the container element they're in.\n\n- In the .container CSS rule, use the shorthand padding property to add 10px of top and bottom padding, and set the left and right padding to 0. This works similarly to the shorthand margin property you used earlier.\n\n```html\n.container {\n  background-color: rgb(0, 0, 0);\n  padding: 10px 0px;\n}\n ```\n\n## 26\n\n- In the additive RGB color model, primary colors are colors that, when combined, create pure white. But for this to happen, each color needs to be at its highest intensity.\n\n- Before you combine colors, set your green marker back to pure green. For the rgb function in the .two CSS rule, set green back to the max value of 255.\n\n```html\n.two {\n  background-color: rgb(0, 255, 0);\n}\n ```\n\n## 27\n\n- Now that you have the primary RGB colors, it's time to combine them.\n\n- For the rgb function in the .container rule, set the red, green, and blue values to the max of 255.\n\n```html\n .container {\n  background-color: rgb(255, 255, 255);\n  padding: 10px 0;\n}\n ```\n\n## 28\n\n- Secondary colors are the colors you get when you combine primary colors. You might have noticed some secondary colors in the last step as you changed the red, green, and blue values.\n\n- To create the first secondary color, yellow, update the rgb function in the .one CSS rule to combine pure red and pure green.\n\n```html\n.one {\n  background-color: rgb(255, 255, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#29","title":"29","text":"<ul> <li>To create the next secondary color, cyan, update the rgb function in the .two CSS rule to combine pure green and pure blue.</li> </ul> <pre><code>.two {\n  background-color: rgb(0, 255, 255);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#30","title":"30","text":"<ul> <li>To create the final secondary color, magenta, update the rgb function in the .three CSS rule to combine pure blue and pure red.</li> </ul> <pre><code>.three {\n  background-color: rgb(255, 0, 255);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#31","title":"31","text":"<ul> <li> <p>Now that you're familiar with secondary colors, you'll learn how to create tertiary colors. Tertiary colors are created by combining a primary with a nearby secondary color.</p> </li> <li> <p>To create the tertiary color orange, update the rgb function in the .one CSS rule so that red is at the max value, and set green to 127.</p> </li> </ul> <pre><code>.one {\n  background-color: rgb(255, 127, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#32","title":"32","text":"<ul> <li> <p>Notice that, to create orange, you had to increase the intensity of red and decrease the intensity of the green rgb values. This is because orange is the combination of red and yellow.</p> </li> <li> <p>To create the tertiary color spring green, combine cyan with green. Update the rgb function in the .two CSS rule so that green is at the max value, and set blue to 127.</p> </li> </ul> <pre><code>.two {\n  background-color: rgb(0, 255, 127);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#33","title":"33","text":"<ul> <li>And to create the tertiary color violet, combine magenta with blue. Update the rgb function in the .three CSS rule so that blue is at the max value, and set red to 127.</li> </ul> <pre><code>.three {\n  background-color: rgb(127, 0, 255);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#34","title":"34","text":"<ul> <li> <p>There are three more tertiary colors: chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta).</p> </li> <li> <p>To create chartreuse green, update the rgb function in the .one CSS rule so that red is at 127, and set green to the max value.</p> </li> <li> <p>For azure, update the rgb function in the .two CSS rule so that green is at 127 and blue is at the max value.</p> </li> <li> <p>And for rose, which is sometimes called bright pink, update the rgb function in the .three CSS rule so that blue is at 127 and red is at the max value.</p> </li> </ul> <pre><code>.one {\n  background-color: rgb(127, 255, 0);\n}\n\n.two {\n  background-color: rgb(0, 127, 255);\n}\n\n.three {\n  background-color: rgb(255, 0, 127);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#35","title":"35","text":"<ul> <li> <p>Now that you've gone through all the primary, secondary, and tertiary colors on a color wheel, it'll be easier to understand other color theory concepts and how they impact design.</p> </li> <li> <p>First, in the CSS rules .one, .two, and .three, adjust the values in the rgb function so that the background-color of each element is set to pure black. Remember that the rgb function uses the additive color model, where colors start as black and change as the values of red, green, and blue increase.</p> </li> </ul> <pre><code>.one {\n  background-color: rgb(0, 0, 0);\n}\n\n.two {\n  background-color: rgb(0, 0, 0);\n}\n\n.three {\n  background-color: rgb(0, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#36","title":"36","text":"<ul> <li> <p>A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.</p> </li> <li> <p>Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.</p> </li> <li> <p>In the rgb function for the .one CSS rule, set the red value to the max of 255 to produce pure red. In the rgb function for .two CSS rule, set the values for green and blue to the max of 255 to produce cyan.</p> </li> </ul> <pre><code>.one {\n  background-color: rgb(255, 0, 0);\n}\n\n.two {\n  background-color: rgb(0, 255, 255);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#37","title":"37","text":"<ul> <li> <p>Notice that the red and cyan colors are very bright right next to each other. This contrast can be distracting if it's overused on a website, and can make text hard to read if it's placed on a complementary-colored background.</p> </li> <li> <p>It's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page.</p> </li> <li> <p>First, in the h1 rule, use the rgb function to set its background-color to cyan.</p> </li> </ul> <pre><code>h1 {\n  background-color: rgb(0, 255, 255);\n  text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#38","title":"38","text":"<ul> <li>Next, in the .one CSS rule, use the rgb function to set the background-color to black. And in the .two CSS rule, use the rgb function to set the background-color to red.</li> </ul> <pre><code>.one {\n  background-color: rgb(0, 0, 0);\n}\n\n.two {\n  background-color: rgb(255, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#39","title":"39","text":"<ul> <li> <p>Notice how your eyes are naturally drawn to the red color in the center? When designing a site, you can use this effect to draw attention to important headings, buttons, or links.</p> </li> <li> <p>There are several other important color combinations outside of complementary colors, but you'll learn those a bit later.</p> </li> <li> <p>For now, use the rgb function in the .two CSS rule to set the background-color to black.</p> </li> </ul> <pre><code>.two {\n  background-color: rgb(0, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#40","title":"40","text":"<ul> <li>And in the h1 CSS rule, remove the background-color property and value to go back to the default white color.</li> </ul> <pre><code>h1 {\n  text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#41","title":"41","text":"<ul> <li> <p>Now it's time to add other details to the markers, starting with the first one.</p> </li> <li> <p>In the first marker div element, change the class one to red.</p> </li> </ul> <pre><code>&lt;div class=\"marker red\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker two\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker three\"&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#42","title":"42","text":"<ul> <li>Update the .one CSS rule to target the new red class.</li> </ul> <pre><code>&lt;.red {\n  background-color: rgb(0, 0, 0);\n}\n\n.two {\n  background-color: rgb(0, 0, 0);\n}\n\n.three {\n  background-color: rgb(0, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#43","title":"43","text":"<ul> <li>And update the rgb function in the .red CSS rule so that the red value is at the max.</li> </ul> <pre><code>.red {\n  background-color: rgb(255, 0, 0);\n}\n\n.two {\n  background-color: rgb(0, 0, 0);\n}\n\n.three {\n  background-color: rgb(0, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#44","title":"44","text":"<ul> <li>Next, change the class two to green in the second marker div, and the class three to blue in the third marker div.</li> </ul> <pre><code>&lt;div class=\"marker red\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker green\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker blue\"&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#45","title":"45","text":"<ul> <li>Update the CSS class selector .two so it targets the new green class. And update the .three class selector so it targets the new blue class.</li> </ul> <pre><code>.red {\n  background-color: rgb(255, 0, 0);\n}\n\n.green {\n  background-color: rgb(0, 255, 0);\n}\n\n.blue {\n  background-color: rgb(0, 0, 255);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#46","title":"46","text":"<ul> <li> <p>A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB values.</p> </li> <li> <p>Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320.</p> </li> <li> <p>In the .green class selector, set the background-color property to a hex color code with the values 00 for red, FF for green, and 00 blue.</p> </li> </ul> <pre><code>.green {\n  background-color: #00FF00;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#47","title":"47","text":"<ul> <li>You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:</li> </ul> <p>Example Code 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).</p> <ul> <li>Lower the intensity of green by setting the green value of the hex color to 7F.</li> </ul> <pre><code>.green {\n  background-color: #007F00;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#48","title":"48","text":"<ul> <li> <p>The HSL color model, or hue, saturation, and lightness, is another way to represent colors.</p> </li> <li> <p>The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.</p> </li> <li> <p>If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.</p> </li> <li> <p>Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.</p> </li> <li> <p>Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.</p> </li> <li> <p>In the .blue CSS rule, use the hsl function to change the background-color property to pure blue. Set the hue to 240, the saturation to 100%, and the lightness to 50%.</p> </li> </ul> <pre><code>.blue {\n  background-color: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#49","title":"49","text":"<ul> <li> <p>You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.</p> </li> <li> <p>A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.</p> </li> <li> <p>one thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.</p> </li> <li> <p>In the .red CSS rule, change the background-color property to background.</p> </li> </ul> <pre><code>.red {\n  background: rgb(255, 0, 0);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#50","title":"50","text":"<ul> <li>The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:</li> </ul> <p>Example Code linear-gradient(gradientDirection, color1, color2, ...); gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.</p> <ul> <li> <p>Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.</p> </li> <li> <p>First, in the .red CSS rule, set the background property to linear-gradient(), and pass it the value 90deg as the gradientDirection.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(90deg);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#51","title":"51","text":"<ul> <li> <p>You'll use the rgb function for the colors of this gradient.</p> </li> <li> <p>In the linear-gradient function, use the rgb function to set the first color argument to pure red.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(90deg, rgb(255, 0, 0));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#52","title":"52","text":"<ul> <li> <p>You won't see gradient yet because the linear-gradient function needs at least two color arguments to work.</p> </li> <li> <p>In the same linear-gradient function, use the rgb function to set the second color argument to pure green.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#53","title":"53","text":"<ul> <li> <p>As you can see, the linear-gradient function produced a smooth red-green gradient. While the linear-gradient function needs a minimum of two color arguments to work, it can accept many color arguments.</p> </li> <li> <p>Use the rgb function to add pure blue as the third color argument to the linear-gradient function.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0), rgb(0, 0, 255));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#54","title":"54","text":"<ul> <li> <p>Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.</p> </li> <li> <p>For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:</p> </li> </ul> <p>Example Code linear-gradient(90deg, red 90%, black); In the linear-gradient function, add a 75% color stop after the first red color argument. Do not add color stops to the other colors arguments.</p> <pre><code>.red {\n  background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#55","title":"55","text":"<ul> <li> <p>Now that you know the basics of how the linear-gradient function and color-stops work, you can use them to make the markers look more realistic.</p> </li> <li> <p>In the linear-gradient function, set gradientDirection to 180deg.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(180deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#56","title":"56","text":"<ul> <li>Next, set the color-stop for red to 0%, the color-stop for green to 50%, and the color-stop for blue to 100%.</li> </ul> <pre><code>.red {\n  background: linear-gradient(180deg, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#57","title":"57","text":"<ul> <li> <p>Now that the color-stops are set, you'll apply different shades of red to each color argument in the linear-gradient function. The shades on the top and bottom edges of the marker will be darker, while the one in the middle will be lighter, as if there's a light above it.</p> </li> <li> <p>For the first color argument, which is currently pure red, update the rgb function so the value for red is 122, the value for green is 74, and the value for blue is 14.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#58","title":"58","text":"<ul> <li> <p>Now modify the second color argument in the linear-gradient function, which is currently pure green.</p> </li> <li> <p>Update the rgb function so the value for red is 245, the value of green is 62, and the value of blue is 113.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(0, 0, 255) 100%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#59","title":"59","text":"<ul> <li> <p>The red marker is looking much more realistic. Now you'll do the same for the green marker, using a combination of the linear-gradient function and hex colors.</p> </li> <li> <p>In the .green CSS rule, change the background-color property to background.</p> </li> </ul> <pre><code>.green {\n  background: #007F00;\n}\n ```\n\n## 60\n\n```html\n\n&lt;!-- Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic. --&gt;\n.established{\n  font-style:italic;\n}\n ```\n\n## 61\n\n- For this marker, you'll use hex color codes for your gradient.\n\n- Use the linear-gradient function and set gradientDirection to 180deg. And for the first color argument, use a hex color code with the values 55 for red, 68 for green, and 0D for blue.\n\n```html\n\n.green {\n  background: linear-gradient(180deg, #55680D);\n}\n\n ```\n\n## 62\n\n- For the second color argument, use a hex color code with the values 71 for red, F5 for green, and 3E for blue.\n\n```html\n\n.green {\n  background: linear-gradient(180deg, #55680D, #71F53E);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#63","title":"63","text":"<ul> <li> <p>Even without the color-stops, you might have noticed that the colors for the green marker transition at the same points as the red marker. The first color is at the start (0%), the second is in the middle (50%), and the last is at the end (100%) of the gradient line.</p> </li> <li> <p>The linear-gradient function automatically calculates these values for you, and places colors evenly along the gradient line by default.</p> </li> <li> <p>In the .red CSS rule, remove the three color stops from the linear-gradient function to clean up your code a bit.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(180deg, rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#64","title":"64","text":"<ul> <li> <p>That's looking better, but the bottom edge of the green marker needs to be darker to add a little more dimension.</p> </li> <li> <p>In the same linear-gradient function, add a hex color code with the values 11 for red, 6C for green, and 31 for blue as the third color argument.</p> </li> </ul> <pre><code>.green {\n  background: linear-gradient(180deg, #55680D, #71F53E, #116C31);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#65","title":"65","text":"<ul> <li> <p>If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default.</p> </li> <li> <p>Clean up your code a little more by removing the gradientDirection argument from both linear-gradient functions.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient( rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n}\n\n.green {\n  background: linear-gradient( #55680D, #71F53E, #116C31);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#66","title":"66","text":"<ul> <li> <p>Now you'll apply a gradient to the blue marker, this time using the hsl function as color arguments.</p> </li> <li> <p>In the .blue CSS rule, change the background-color property to background.</p> </li> </ul> <pre><code>.blue {\n  background: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#67","title":"67","text":"<ul> <li>Use the linear-gradient function, and pass in the hsl function with the values 186 for hue, 76% for saturation, and 16% for lightness as the first color argument.</li> </ul> <pre><code>.blue {\n  background: linear-gradient(hsl(186, 76%, 16%));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#68","title":"68","text":"<ul> <li>As the second color argument, pass in the hsl function with the values 223 for hue, 90% for saturation, and 60% for lightness.</li> </ul> <pre><code>.blue {\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#69","title":"69","text":"<ul> <li>And as the third color argument, pass in the hsl function with the values 240 for hue, 56% for saturation, and 42% for lightness.</li> </ul> <pre><code>.blue {\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#70","title":"70","text":"<ul> <li> <p>Now that the markers have the correct colors, it's time to build the marker sleeves. Start with the red marker.</p> </li> <li> <p>Inside the red marker div element, create a new div element and give it a class of sleeve.</p> </li> </ul> <pre><code>&lt;div class=\"marker red\"&gt;\n        &lt;div class=\"sleeve\"&gt;\n          &lt;/div&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#71","title":"71","text":"<ul> <li>Create a new CSS rule that targets the class sleeve. Set the width property to 110px, and the height property to 25px.</li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#72","title":"72","text":"<ul> <li> <p>To make the marker look more realistic, give the sleeve a transparent white color.</p> </li> <li> <p>First, set the sleeve element's background-color to white.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: white;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#73","title":"73","text":"<ul> <li> <p>Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.</p> </li> <li> <p>With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.</p> </li> <li> <p>In the .sleeve CSS rule, set the opacity property to 0.5.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: white;\n  opacity: 0.5;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#74","title":"74","text":"<ul> <li> <p>Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.</p> </li> <li> <p>You've already set sleeve's opacity with a named color and the opacity property, but you can add an alpha channel to the other CSS color properties.</p> </li> <li> <p>Inside the .sleeve rule, remove the opacity property and value.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: white;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#75","title":"75","text":"<ul> <li> <p>You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.</p> </li> <li> <p>The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:</p> </li> </ul> <p>Example Code rgba(redValue, greenValue, blueValue, alphaValue);</p> <ul> <li> <p>You can also use an alpha channel with hsl and hex colors. You will see how to do that soon.</p> </li> <li> <p>In the .sleeve rule, use the rgba function to set the background-color property to pure white with 50% opacity.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 50%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#76","title":"76","text":"<ul> <li> <p>Your sleeve is looking good, but it would look even better if it was positioned more toward the right side of the marker. One way to do that is to add another element before the sleeve to push it to the right.</p> </li> <li> <p>Add a new div with the class cap before the sleeve div element.</p> </li> </ul> <pre><code>&lt;div class=\"marker red\"&gt;\n        &lt;div class=\"cap\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"sleeve\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#77","title":"77","text":"<ul> <li>Create a new CSS rule to target the class cap. In the new rule, set the width property to 60px, and the height to 25px.</li> </ul> <pre><code>.cap {\n  width: 60px;\n  height: 25px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#78","title":"78","text":"<ul> <li> <p>It looks like your sleeve disappeared, but don't worry -- it's still there. What happened is that your new cap div is taking up the entire width of the marker, and is pushing the sleeve down to the next line.</p> </li> <li> <p>This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.</p> </li> <li> <p>To position two div elements on the same line, set their display properties to inline-block.</p> </li> <li> <p>Create a new rule to target both the cap and sleeve classes, and set display to inline-block.</p> </li> </ul> <pre><code>.cap, .sleeve {\n display: inline-block;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#79","title":"79","text":"<ul> <li> <p>In the last project, you learned a little bit about borders and the border-color property.</p> </li> <li> <p>All HTML elements have borders, though they're usually set to none by default. With CSS, you can control all aspects of an element's border, and set the border on all sides, or just one side at a time. For a border to be visible, you need to set its width and style.</p> </li> <li> <p>In the .sleeve CSS rule, add the border-left-width property with the value 10px.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left-width: 10px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#80","title":"80","text":"<ul> <li> <p>Borders have several styles to choose from. You can make your border a solid line, but you can also use a dashed or dotted line if you prefer. Solid border lines are probably the most common.</p> </li> <li> <p>In the .sleeve CSS rule, add the border-left-style property with the value solid.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left-width: 10px;\n  border-left-style: solid;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#81","title":"81","text":"<ul> <li> <p>Your border should be visible now. If no color is set, black is used by default.</p> </li> <li> <p>But to make your code more readable, it's better to set the border color explicitly.</p> </li> <li> <p>In the .sleeve CSS rule, add the border-left-color property with the value black.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left-width: 10px;\n  border-left-style: solid;\n  border-left-color: black;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#82","title":"82","text":"<ul> <li>The border-left shorthand property lets you to set the left border's width, style, and color at the same time.</li> </ul> <p>Here is the syntax:</p> <p>Example Code border-left: width style color;</p> <ul> <li>In the .sleeve CSS rule, replace the border-left-width, border-left-style, and border-left-color properties with the border-left shorthand property. The values for the width, style, and color of the left border should be the same.</li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left: 10px solid black;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#83","title":"83","text":"<ul> <li> <p>Your marker is looking good. But to make it look even more realistic, you can change the border style to double solid borders.</p> </li> <li> <p>For the border-left shorthand property, change the border style value from solid to double.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left: 10px double black;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#84","title":"84","text":"<ul> <li> <p>The black color of your border looks pretty harsh against the more transparent sleeve. You can use an alpha channel to lower the opacity of the black border.</p> </li> <li> <p>For the border-left shorthand property, use the rgba function to set the color value to pure black with 75% opacity.</p> </li> </ul> <pre><code>.sleeve {\n  width: 110px;\n  height: 25px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-left: 10px double rgba(0, 0, 0, 75%);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#85","title":"85","text":"<ul> <li> <p>Awesome. Your red marker is looking good. Now all you need to do is add the caps and sleeves to your other markers.</p> </li> <li> <p>Add a cap and sleeve to both the green and blue markers. You can just copy the div elements from the red marker and paste them into the other two markers.</p> </li> </ul> <pre><code>&lt;div class=\"marker red\"&gt;\n        &lt;div class=\"cap\"&gt;&lt;/div&gt;\n        &lt;div class=\"sleeve\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker green\"&gt;\n        &lt;div class=\"cap\"&gt;&lt;/div&gt;\n        &lt;div class=\"sleeve\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"marker blue\"&gt;\n        &lt;div class=\"cap\"&gt;&lt;/div&gt;\n        &lt;div class=\"sleeve\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#86","title":"86","text":"<ul> <li> <p>The last thing you'll do is add a slight shadow to each marker to make them look even more realistic.</p> </li> <li> <p>The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:</p> </li> </ul> <p>Example Code box-shadow: offsetX offsetY color; Here's how the offsetX and offsetY values work:</p> <p>both offsetX and offsetY accept number values in px and other CSS units a positive offsetX value moves the shadow right and a negative value moves it left a positive offsetY value moves the shadow down and a negative value moves it up if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change. The height and width of the shadow is determined by the height and width of the element it's applied to. You can also use an optional spreadRadius value to spread out the reach of the shadow. More on that later.</p> <p>Start by adding a simple shadow to the red marker.</p> <ul> <li>In the .red CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, and red for color.</li> </ul> <pre><code>.red {\n  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n  box-shadow: 5px 5px red;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#87","title":"87","text":"<ul> <li> <p>As you can see, you added a simple red shadow around your marker that's 5 pixels to the right, and 5 pixels down.</p> </li> <li> <p>But what if you wanted to position your shadow on the opposite side? You can do that by using negative values for offsetX and offsetY.</p> </li> <li> <p>Update the values for the box-shadow property, and set offsetX to -5px, and offsetY to -5px.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n  box-shadow: -5px -5px red;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#88","title":"88","text":"<ul> <li>Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:</li> </ul> <p>Example Code box-shadow: offsetX offsetY blurRadius color; If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.</p> <ul> <li>In the .green CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, 5px for blurRadius, and green for color.</li> </ul> <pre><code>.green {\n  background: linear-gradient(#55680D, #71F53E, #116C31);\n  box-shadow: 5px 5px 5px green;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#89","title":"89","text":"<ul> <li>But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:</li> </ul> <p>Example Code box-shadow: offsetX offsetY blurRadius spreadRadius color; Like blurRadius, spreadRadius defaults to 0 if it isn't included.</p> <p>Practice by adding a 5 pixel shadow directly around the blue marker.</p> <ul> <li>In the .blue CSS rule, add the box-shadow property with the values 0 for offsetX, 0 for offsetY, 0 for blurRadius, 5px for spreadRadius, and blue for color.</li> </ul> <pre><code>.blue {\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));\n  box-shadow: 0 0 0 5px blue;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#90","title":"90","text":"<ul> <li> <p>Now that you're familiar with the box-shadow property you can finalize the shadows, starting with the one for the red marker.</p> </li> <li> <p>In the .red CSS rule, update the values for the box-shadow property so offsetX is 0,offsetY is 0, blurRadius is 20px, spreadRadius is 0, and color is red. Remember that you don't need to add units to a zero value.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n  box-shadow: 0 0 20px 0 red;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#91","title":"91","text":"<ul> <li> <p>Next, update the color value of the red marker's box-shadow property.</p> </li> <li> <p>Replace the named color with the rgba function. Use the values 83 for red, 14 for green, 14 for blue and 0.8 for the alpha channel.</p> </li> </ul> <pre><code>.red {\n  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));\n  box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#92","title":"92","text":"<ul> <li> <p>The shadows for your green and blue markers will have the same position, blur, and spread. The only difference will be the colors.</p> </li> <li> <p>In the .green and .blue CSS rules, update the values for the box-shadow properties so offsetX is 0,offsetY is 0, blurRadius is 20px, and spreadRadius is 0. Leave the colors as green and blue for now.</p> </li> </ul> <pre><code>green {\n  background: linear-gradient(#55680D, #71F53E, #116C31);\n  box-shadow: 0 0 20px 0 green;\n}\n\n.blue {\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));\n  box-shadow: 0 0 20px 0 blue;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#93","title":"93","text":"<ul> <li>For the green marker's box-shadow property, replace the named color with a hex color code. Use the values 3B for red, 7E for green, 20 for blue, and CC for the alpha channel.</li> </ul> <pre><code>.green {\n  background: linear-gradient(#55680D, #71F53E, #116C31);\n  box-shadow: 0 0 20px 0 #3B7E20CC;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Buildingsetofmarkers.html#94","title":"94","text":"<ul> <li> <p>Finally, for the blue marker's box-shadow property, replace the named color with the hsla function. Use the values 223 for hue, 59% for saturation, 31% for lightness, and 0.8 for the alpha channel.</p> </li> <li> <p>And with that, your set of colored markers is complete! Well done.</p> </li> </ul> <pre><code>.blue {\n  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));\n  box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html","title":"Cafe Menu","text":""},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#1-tags","title":"1. Tags","text":"<ul> <li>CSS (Cascading Style Sheets) by building a cafe menu. CSS is the language used to style an HTML document. It describes how HTML elements should be displayed on the screen.</li> <li>Every HTML document should have a DOCTYPE declaration and html element. The DOCTYPE tells the browser which version of HTML the document is in. And the html element represents the root element which contains all other elements.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;!--all other elements go here--&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#2","title":"2","text":"<pre><code>&lt;head&gt; \n    &lt;title&gt; Cafe Menu &lt;/title&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#3","title":"3","text":"<ul> <li> <p>The title is one of several elements that provide extra information not visible on the web page, but it is useful for search engines or how the page gets displayed.</p> </li> <li> <p>Inside the head element, nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to encode characters for the page.</p> </li> </ul> <pre><code>&lt;head&gt;\n    &lt;title&gt;Cafe Menu&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#4","title":"4","text":"<pre><code>&lt;body&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#5","title":"5","text":"<pre><code>&lt;body&gt;\n&lt;main&gt;\n&lt;/main&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#6","title":"6","text":"<pre><code>&lt;body&gt;\n&lt;main&gt;\n    &lt;h1&gt; camper cafe &lt;/h1&gt;\n&lt;/main&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#7","title":"7","text":"<pre><code>&lt;h1&gt; camper cafe &lt;/h1&gt;\n&lt;p&gt; Est. 2020 &lt;p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#8","title":"8","text":"<pre><code>&lt;main&gt;\n      &lt;h1&gt;CAMPER CAFE&lt;/h1&gt;\n      &lt;p&gt;Est. 2020&lt;/p&gt;\n      &lt;section&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#9","title":"9","text":"<pre><code>&lt;section&gt;\n    &lt;h2&gt; Coffee &lt;/h2&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#10","title":"10","text":"<ul> <li>added a style element to the head element</li> </ul> <pre><code>&lt;style&gt;\n&lt;/style&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#11","title":"11","text":"<ul> <li>You can add style to an element by specifying it in the style element and setting a property for it like this:</li> </ul> <pre><code>h1 {\n text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#12","title":"12","text":"<p>-In the previous step, you used a type selector to style the h1 element. Center the content of the h2 and the p elements by adding a new type selector for each one to the existing style element.</p> <pre><code>p {\n text-align: center;\n}\n\nh2 {\n text-align: center;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#13","title":"13","text":"<ul> <li>You now have three type selectors with the exact same styling. You can add the same group of styles to many elements by creating a list of selectors. Each selector is separated with commas like this:</li> </ul> <p>p,h1,h2 {  text-align: center; }</p> <ul> <li>Delete the three existing type selectors and replace them with one selector list that centers the text for the h1, h2, and p elements.</li> </ul>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#14","title":"14","text":"<ul> <li>This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.</li> </ul>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#15","title":"15","text":"<ul> <li>removed style content to later link the style sheet</li> </ul>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#16","title":"16","text":"<ul> <li>Inside the head element, add a link element. Give it a rel attribute with the value of \"stylesheet\" and a href attribute with the value of \"styles.css\".</li> </ul> <pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#17","title":"17","text":"<ul> <li> <p>For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a meta element with a special content attribute.</p> </li> <li> <p>Add the following within the head element:</p> </li> </ul> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#18","title":"18","text":"<ul> <li>Add another style to the file that changes the background-color property to brown for the body element.</li> </ul> <pre><code>body {\n  background-color: brown;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#19","title":"19","text":"<pre><code>body {\n  background-color: burlywood;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#20","title":"20","text":"<ul> <li> <p>The div element is used mainly for design layout purposes unlike the other content elements you have used so far. Add a div element inside the body element and then move all the other elements inside the new div.</p> </li> <li> <p>Inside the opening div tag, add the id attribute with a value of menu.</p> </li> </ul> <pre><code>&lt;div id=\"menu\"&gt;\n&lt;/div&gt;\n ```\n\n## 21\n\n- You can use the id selector to target a specific element with an id attribute. An id selector is defined by placing the hash symbol # directly in front of the element's id value. For example, if an element has the id of cat then you would target that element like this:\n\n- Example Code\n- #cat {\n  - width: 250px;\n- }\n- Use the #menu selector to give your element a width of 300px.\n\n```html\n#menu {\n  width: 300px;\n}\n ```\n\n## 22\n\n```html\n/* background-color: burlywood; */\n ```\n\n## 23\n\n```html\n#menu {\n  background-color: burlywood;\n  width: 300px;\n}\n ```\n\n## 24\n\n- Now it's easy to see that the text is centered inside the #menu element. Currently, the width of the #menu element is specified in pixels (px).\n\n- Change the width property's value to be 80%, to make it 80% the width of its parent element (body).\n\n```html\n#menu {\n  width: 80%;\n  background-color: burlywood;\n}\n ```\n\n## 25\n\n- Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element.\n\n```html\n#menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n}\n ```\n\n## 26\n\n- So far you have been using type and id selectors to style elements. However, it is more common to use a different selector to style your elements.\n\nA class selector is defined by a name with a dot directly in front of it, like this:\n\nExample Code\n.class-name {\n  styles\n}\nChange the existing #menu selector into a class selector by replacing #menu with a class named .menu.\n\n```html\n.menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n}\n ```\n\n## 27\n\n- To apply the class's styling to the div element, remove the id attribute and add a class attribute to the div element's opening tag. Make sure to set the class value to menu.\n\n```html\n &lt;div class=\"menu\"&gt;\n ```\n\n## 28\n\n```html\n&lt;!-- added an image in the body element --&gt;\n body {\n  background-image:url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#29","title":"29","text":"<ul> <li>Time to start adding some menu items. Add an empty article element under the Coffee heading. It will contain a flavor and price of each coffee you currently offer.</li> </ul> <pre><code>&lt;article&gt;&lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#30","title":"30","text":"<ul> <li>article elements commonly contain multiple elements that have related information. In this case, it will contain a coffee flavor and a price for that flavor. Nest two p elements inside your article element. The first one's text should be French Vanilla, and the second's text 3.00.</li> </ul> <pre><code>&lt;article&gt;\n            &lt;p&gt; French Vanilla &lt;/p&gt;\n            &lt;p&gt; 3.00 &lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#31","title":"31","text":"<pre><code>&lt;!-- added more articles to include more coffee price pairs --&gt;\n &lt;article&gt;\n            &lt;p&gt;French Vanilla&lt;/p&gt;\n            &lt;p&gt;3.00&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article&gt;\n            &lt;p&gt;Caramel Macchiato&lt;/p&gt;\n            &lt;p&gt;3.75&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article&gt;\n            &lt;p&gt;Pumpkin Spice&lt;/p&gt;\n            &lt;p&gt;3.50&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article&gt;\n            &lt;p&gt;Hazelnut&lt;/p&gt;\n            &lt;p&gt;4.00&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article&gt;\n            &lt;p&gt;Mocha&lt;/p&gt;\n            &lt;p&gt;4.50&lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#32","title":"32","text":"<pre><code>&lt;!-- added class element to p tag to edit flavor to the left and price to the right --&gt;\n &lt;p class=\"flavor\"&gt;French Vanilla&lt;/p&gt;\n            &lt;p&gt;3.00&lt;/p&gt; \n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#33","title":"33","text":"<pre><code>&lt;!-- add class selector .flavor to text align flavor to the left --&gt;\n .flavor {\n  text-align: left;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#34","title":"34","text":"<pre><code>&lt;!-- added class element to p tag with the price to add class selector and have text align to the right --&gt;\n &lt;p class=\"price\"&gt;3.00&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#35","title":"35","text":"<pre><code>&lt;!-- added .price class selector --&gt;\n .price {\n  text-align:right;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#36","title":"36","text":"<pre><code>&lt;!-- start to inline both p tags so they are lined up on the same line in the menu as p tags are naturally block level elements --&gt;\n &lt;article class=\"item\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#37","title":"37","text":"<pre><code>&lt;!-- The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this: --&gt;\n .item p {\n  display: inline-block;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#38","title":"38","text":"<pre><code>&lt;!-- That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each. --&gt;\n .flavor {\n  width: 50%;\n  text-align: left;\n}\n\n.price {\n  width: 50%;\n  text-align: right;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#39","title":"39","text":"<pre><code>&lt;!--  Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%. --&gt;\n .flavor {\n  text-align: left;\n  width: 49%;\n}\n\n.price {\n  text-align: right;\n  width: 49%;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#40","title":"40","text":"<pre><code>&lt;!-- put the p elements on the same line in the editor --&gt;\n &lt;p class=\"flavor\"&gt;French Vanilla&lt;/p&gt;&lt;p class=\"price\"&gt;3.00&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#41","title":"41","text":"<pre><code>&lt;!-- changed width back to 50% in the class selectors again, now there is no space from the flavor or price on the menu --&gt;\n .flavor {\n  text-align: left;\n  width: 50%;\n}\n\n.price {\n  text-align: right;\n  width: 50%;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#42","title":"42","text":"<pre><code>&lt;!-- added the class item to the rest of the articles with a flavor and price --&gt;\n &lt;article class=\"item\"&gt;\n            &lt;p&gt;Caramel Macchiato&lt;/p&gt;\n            &lt;p&gt;3.75&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Pumpkin Spice&lt;/p&gt;\n            &lt;p&gt;3.50&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Hazelnut&lt;/p&gt;\n            &lt;p&gt;4.00&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Mocha&lt;/p&gt;\n            &lt;p&gt;4.50&lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#43","title":"43","text":"<pre><code>&lt;!-- put the other p elements on the same line so there is no space when they are on the sides --&gt;\n &lt;article class=\"item\"&gt;\n            &lt;p&gt;Caramel Macchiato&lt;/p&gt;&lt;p&gt;3.75&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Pumpkin Spice&lt;/p&gt;&lt;p&gt;3.50&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Hazelnut&lt;/p&gt;&lt;p&gt;4.00&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p&gt;Mocha&lt;/p&gt;&lt;p&gt;4.50&lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#44","title":"44","text":"<pre><code>&lt;!-- added the class elements to each respective flavor and price to add style --&gt;\n &lt;article class=\"item\"&gt;\n            &lt;p class=\"flavor\"&gt;Caramel Macchiato&lt;/p&gt;&lt;p class=\"price\"&gt;3.75&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p class=\"flavor\"&gt;Pumpkin Spice&lt;/p&gt;&lt;p class=\"price\"&gt;3.50&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p class=\"flavor\"&gt;Hazelnut&lt;/p&gt;&lt;p class=\"price\"&gt;4.00&lt;/p&gt;\n          &lt;/article&gt;\n          &lt;article class=\"item\"&gt;\n            &lt;p class=\"flavor\"&gt;Mocha&lt;/p&gt;&lt;p class=\"price\"&gt;4.50&lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#45","title":"45","text":"<pre><code>&lt;!-- changed flavor width to 75% and price to 25% to wrap nicely --&gt;\n  .flavor {\n  text-align: left;\n  width: 75%;\n}\n\n.price {\n  text-align: right;\n  width: 25%;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#46","title":"46","text":"<pre><code>&lt;!-- added another section for desserts on the menu --&gt;\n  &lt;section&gt;&lt;/section&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#47","title":"47","text":"<pre><code>&lt;!-- added h2 element for desserts --&gt;\n  &lt;section&gt;\n          &lt;h2&gt; Desserts&lt;/h2&gt;\n        &lt;/section&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#48","title":"48","text":"<pre><code>&lt;!-- added empty article to display desserts and prices with class item --&gt;\n  &lt;h2&gt;Desserts&lt;/h2&gt;\n  &lt;article class=\"item\"&gt;&lt;/article\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#49","title":"49","text":"<pre><code>&lt;!-- added 2 p elements for dessert and price on the same line --&gt;\n  &lt;article class=\"item\"&gt;\n            &lt;p&gt;Donut&lt;/p&gt;&lt;p&gt;1.50&lt;/p&gt;\n          &lt;/article&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#50","title":"50","text":"<pre><code>&lt;!-- added a class for dessert and price in the respective p element --&gt;\n  &lt;p class=\"dessert\"&gt;Donut&lt;/p&gt;&lt;p class=\"price\"&gt;1.50&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#51","title":"51","text":"<pre><code>&lt;!-- added dessert as the additional selector with flavor to apply the same style --&gt;\n  .flavor, .dessert {\n  text-align: left;\n  width: 75%;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#52","title":"52","text":"<pre><code>&lt;!-- added the rest of the deserts in their respective artcle element and price --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#53","title":"53","text":"<pre><code>&lt;!-- You can give your menu some space between the content and the sides with various padding properties.\n\nGive the menu class a padding-left and a padding-right with the same value 20px. --&gt; \n\n.menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 20px;\n  padding-right: 20px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#54","title":"54","text":"<pre><code>&lt;!-- added padding to top and bottom --&gt; \n          .menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#55","title":"55","text":"<pre><code>&lt;!-- Since all 4 sides of the menu have the same internal spacing, go ahead and delete the four properties and use a single padding property with the value 20px. --&gt;\n.menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#56","title":"56","text":"<pre><code>&lt;!-- The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.\n\nAdd a max-width property to the menu class with a value of 500px to prevent it from growing too wide. --&gt;\n\n.menu {\n  width: 80%;\n  background-color: burlywood;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  max-width: 500px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#57","title":"57","text":"<pre><code>&lt;!-- You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.\n\nChange all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable. --&gt;\n\nbody {\n  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);\n  font-family: sans-serif;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#58","title":"58","text":"<pre><code>&lt;!-- Style both the h1 and the h2 elements using a single selector so that these elements' text use Impact font. --&gt;\nh1,h2 {\nfont-family: Impact\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#59","title":"59","text":"<pre><code>&lt;!-- You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available.\n\nAdd the fallback font serif after the Impact font. --&gt;\nh1, h2 {\n  font-family: Impact, serif;\n}\n ```\n\n## 60\n\n```html\n\n&lt;!-- Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic. --&gt;\n.established{\n  font-style:italic;\n}\n ```\n\n## 61\n\n```html\n\n&lt;!-- Now apply the established class to the Est. 2020 text. --&gt;\n\n&lt;h1&gt;CAMPER CAFE&lt;/h1&gt;\n        &lt;p class=\"established\"&gt;Est. 2020&lt;/p&gt;\n\n ```\n\n## 62\n\n```html\n\n- The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers.\n\n- Add two new type selectors (h1 and h2). Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.\n\n\nh1 {\n  font-size: 40px\n}\n\nh2 {\n  font-size: 30px\n}\n\n ```\n\n## 63\n\n```html\n\n- Add a footer element below the main element, where you can add some additional information.\n\n&lt;footer&gt; &lt;/footer&gt;\n\n ```\n\n## 64\n\n```html\n- Inside the footer, add a p element. Then, nest an anchor (a) element in the p that links to https://www.freecodecamp.org and has the text Visit our website.\n\n&lt;footer&gt;\n        &lt;p&gt; &lt;a href=\"https://www.freecodecamp.org\"&gt; Visit our website &lt;/a&gt; &lt;/p&gt;\n      &lt;/footer&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#65","title":"65","text":"<pre><code>- Add a second p element below the one with the link and give it the text 123 Free Code Camp Drive.\n\n&lt;p&gt;\n          &lt;a href=\"https://www.freecodecamp.org\" target=\"_blank\"&gt;Visit our website&lt;/a&gt;\n        &lt;/p&gt;\n        &lt;p&gt; 123 Free Code Camp Drive&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#66","title":"66","text":"<pre><code>-added hr element to seperate content, it is a line on the page, it is also a void element\n\n&lt;hr&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#67","title":"67","text":"<pre><code>- The default properties of an hr element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the height property.\n\n- Change the height of the hr element to be 3px.\n\nhr {\n  height: 3px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#68","title":"68","text":"<pre><code>- changed hr background to match color of beans\n\nhr {\n  height: 3px;\n  background-color: brown;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#69","title":"69","text":"<pre><code>- Notice the grey color along the edges of the line. Those edges are known as borders. Each side of an element can have a different color or they can all be the same.\n\n- Make all the edges of the hr element the same color as the background of it using the border-color property.\n\nhr {\n  height: 3px;\n  background-color: brown;\n  border-color: brown;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#70","title":"70","text":"<pre><code>- changed height of hr element to 2px\n\nhr {\n  height: 2px;\n  background-color: brown;\n  border-color: brown;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#71","title":"71","text":"<pre><code>- added another hr element below main and above the footer to seperate it\n\n&lt;hr&gt;&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#72","title":"72","text":"<pre><code>- To create a little more room around the menu, add 20px of space on the inside of the body element by using the padding property.\n\nbody {\n  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);\n  font-family: sans-serif;\n  padding: 20px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#73","title":"73","text":"<pre><code>- Focusing on the menu items and prices, there is a fairly large gap between each line.\n\n - Use the existing selector that targets all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px.\n\n.item p {\n  display: inline-block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#74","title":"74","text":"<pre><code>- made font size of items and price 18px\n\n.item p {\n  display: inline-block;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-size: 18px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#75","title":"75","text":"<pre><code>- Changing the margin-bottom to 5px looks great. However, now the space between the Cinnamon Roll menu item and the second hr element does not match the space between the top hr element and the Coffee heading.\n\n - Add some more space by creating a class named bottom-line using 25px for the margin-top property.\n\n.bottom-line {\n  margin-top: 25px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#76","title":"76","text":"<pre><code>- Now add the bottom-line class to the second hr element so the styling is applied.\n\n&lt;hr class=\"bottom-line\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#77","title":"77","text":"<pre><code>- added comment to organize styles.css to seperate where we are styling the footer\n\n/* FOOTER */\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#78","title":"78","text":"<pre><code>- Moving down to the footer element, make all the text have a value of 14px for the font size.\n\nfooter {\n  font-size: 14px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#79","title":"79","text":"<pre><code>- The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.\n\n- To make the footer links the same color regardless if a link has been visited, use a type selector for the anchor element (a) and use the value black for the color property.\n\na {\n  color: black;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#80","title":"80","text":"<pre><code>- You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.\n\n- Change the color of the footer Visit our website link to be grey when a user has visited the link.\n\na:visited { \n  color: grey; \n  }\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#81","title":"81","text":"<pre><code>- You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.\n\n- Change the color of the footer Visit our website link to be brown when a user hovers over it.\n\na:hover { \n  color: brown; \n  }\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#82","title":"82","text":"<pre><code>- You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.\n\n- Change the color of the footer Visit our website link to be white when clicked on.\n\na:active { \n  color: white; \n  }\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#83","title":"83","text":"<pre><code>- To keep with the same color theme you have already been using (black and brown), change the color for when the link is visited to black and use brown for when the link is actually clicked.\n\na:visited {\n  color: black;\n}\n\na:hover {\n  color: brown;\n}\n\na:active {\n  color: brown;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#84","title":"84","text":"<pre><code>- The menu text CAMPER CAFE has a different space from the top than the address's space at the bottom of the menu. This is due to the browser having some default top margin for the h1 element.\n\n- Change the top margin of the h1 element to 0 to remove all the top margin.\n\nh1 {\n  font-size: 40px;\n  margin-top: 0;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#85","title":"85","text":"<pre><code>- To remove some of the vertical space between the h1 element and the text Est. 2020, change the bottom margin of the h1 to 15px.\n\nh1 {\n  font-size: 40px;\n  margin-top: 0;\n  margin-bottom: 15px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#86","title":"86","text":"<pre><code>- Now the top spacing looks good. The space below the address at the bottom of the menu is a little bigger than the space at the top of the menu and the h1 element.\n\n- To decrease the default margin space below the address p element, create a class selector named address and use the value 5px for the margin-bottom property.\n\n.address {\n  margin-bottom: 5px;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#87","title":"87","text":"<pre><code>- Now apply the address class to the p element containing the street address 123 Free Code Camp Drive\n\n&lt;footer&gt;\n        &lt;p&gt;\n          &lt;a href=\"https://www.freecodecamp.org\" target=\"_blank\"&gt;Visit our website&lt;/a&gt;\n        &lt;/p&gt;\n        &lt;p class=\"address\"&gt;123 Free Code Camp Drive&lt;/p&gt;\n      &lt;/footer&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#88","title":"88","text":"<pre><code>- The menu looks good, but other than the coffee beans background image, it is mainly just text.\n\n- Under the Coffee heading, add an image using the url https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg. Give the image an alt value of coffee icon.\n\n&lt;h2&gt;Coffee&lt;/h2&gt;\n          &lt;img src=\"https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg\" alt=\"coffee icon\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#89","title":"89","text":"<pre><code>- The image you added is not centered horizontally like the Coffee heading above it. img elements are \"like\" inline elements.\n\n- To make the image behave like heading elements (which are block-level), create an img type selector and use the value block for the display property and use the applicable margin-left and margin-right values to center it horizontally.\n\nimg {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#90","title":"90","text":"<pre><code>- Add one last image under the Desserts heading using the url https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg. Give the image an alt value of pie icon.\n\n&lt;h2&gt;Desserts&lt;/h2&gt;\n          &lt;img src=\"https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg\" alt=\"pie icon\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Cafemenu.html#91","title":"91","text":"<pre><code>- It would be nice if the vertical space between the h2 elements and their associated icons was smaller. The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number.\n\n- There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. Negative values are created using a - in front of the value. To complete this project, go ahead and use a negative top margin of 25px in the img type selector.\n\nimg {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -25px\n}\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html","title":"Cat Photo APP","text":""},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#1-tags","title":"1. Tags","text":"<ul> <li>HTML has opening and closing tags</li> </ul> <pre><code>&lt;h1&gt; Hello world &lt;/h1&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#2","title":"2","text":"<pre><code>&lt;h1&gt; CatPhotoApp &lt;/h1&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#3","title":"3","text":"<pre><code>&lt;h2&gt; CatPhotoApp &lt;/h2&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#4","title":"4","text":"<pre><code>&lt;--! TODO: Remove h1 --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#5","title":"5","text":"<pre><code>&lt;main&gt;\n&lt;/main&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#6","title":"6","text":"<pre><code>&lt;h1&gt; hello world&lt;/h1&gt;\n&lt;p&gt; Some more important content..nesting&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#7","title":"7","text":"<pre><code>&lt;img&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#8","title":"8","text":"<pre><code>&lt;img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#9","title":"9","text":"<pre><code>&lt;img src=\"cat.jpg\" alt=\"A cat\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#10","title":"10","text":"<pre><code>&lt;a href=\"https://www.freecodecamp.org\"&gt;&lt;/a&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#11","title":"11","text":"<pre><code>&lt;a href=\"https://www.freecodecamp.org\"&gt;click here to go to freeCodeCamp.org&lt;/a&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#12","title":"12","text":"<pre><code>&lt;p&gt;I think &lt;a href=\"https://www.freecodecamp.org\"&gt;freeCodeCamp&lt;/a&gt; is great.&lt;/p&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#13","title":"13","text":""},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#14","title":"14","text":"<pre><code>&lt;a href=\"https://www.freecodecamp.org\" target=\"_blank\"&gt;freeCodeCamp&lt;/a&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#15","title":"15","text":"<pre><code>&lt;a href=\"example-link\"&gt;\n  &lt;img src=\"image-link.jpg\" alt=\"A photo of a cat.\"&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#16","title":"16","text":"<pre><code>&lt;section&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#17","title":"17","text":"<pre><code>&lt;!-- add new sections to organzie page elements --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#18","title":"18","text":"<pre><code>&lt;section&gt;\n&lt;h2&gt; Cat lists &lt;/h2&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#19","title":"19","text":"<pre><code>&lt;!-- when using a lower heading element, it is implied you are starting a new subsection --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#20","title":"20","text":"<pre><code>&lt;!-- to create an unordered list, use the &lt;ul&gt; &lt;/ul&gt; Tags --&gt;\n ```\n\n## 21\n\n```html\n&lt;!-- to create a item in your unordered or ordered list, use &lt;li&gt; &lt;/li&gt; Tags --&gt;\n ```\n\n## 22\n\n```html\n&lt;img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg\" alt=\"A slice   of lasagna on a plate.\"&gt;\n ```\n\n## 23\n\n```html\n&lt;!-- The figure element represents self-contained content and will allow you to associate an image with a caption. --&gt;\n\n &lt;figure&gt;\n\n&lt;/figure&gt;\n ```\n\n## 24\n\n```html\n&lt;figure&gt;\n          &lt;img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg\" alt=\"A slice of lasagna on a plate.\"&gt;\n          &lt;figcaption&gt; Cats love lasagna &lt;/figcaption&gt;\n        &lt;/figure&gt;\n ```\n\n## 25\n\n```html\n&lt;!-- To place emphasis on a specific word or phrase, you can use the em element. --&gt;\n&lt;figcaption&gt;Cats &lt;em&gt;love&lt;/em&gt; lasagna.&lt;/figcaption&gt;\n ```\n\n## 26\n\n```html\n&lt;h3&gt; Top 3 things cats hate: &lt;/h3&gt;\n ```\n\n## 27\n\n```html\n&lt;!-- The code for an ordered list (ol) is similar to an unordered list, but list items in an ordered list are numbered when displayed. --&gt;\n &lt;ol&gt;\n            &lt;li&gt;flea treatment&lt;/li&gt;\n            &lt;li&gt;thunder&lt;/li&gt;\n            &lt;li&gt;other cats&lt;/li&gt;\n        &lt;/ol&gt;\n ```\n\n## 28\n\n```html\n&lt;!-- added another figure elemet --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#29","title":"29","text":"<pre><code>&lt;!-- added nested img elemtn with src attribute in the figure element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#30","title":"30","text":"<pre><code>&lt;!-- added a alt attribute to the img element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#31","title":"31","text":"<pre><code>&lt;!-- added a fig caption after the img element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#32","title":"32","text":"<pre><code>&lt;!-- The strong element is used to indicate that some text is of strong importance or urgent. --&gt;\n &lt;figcaption&gt;Cats &lt;strong&gt;hate&lt;/strong&gt; other cats.&lt;/figcaption&gt; \n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#33","title":"33","text":"<pre><code>&lt;!-- added another section for our 3rd section --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#34","title":"34","text":"<pre><code>&lt;!-- added another h2 element in the 3rd section --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#35","title":"35","text":"<pre><code>&lt;!-- The form element is used to get information from a user like their name, email, and other details. --&gt;\n &lt;form&gt; &lt;/form&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#36","title":"36","text":"<pre><code>&lt;!-- The action attribute indicates where form data should be sent. --&gt;\n &lt;form action=\"https://freecatphotoapp.com/submit-cat-photo\"&gt;\n        &lt;/form&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#37","title":"37","text":"<pre><code>&lt;!-- The input element allows you several ways to collect data from a web form. Like img elements, input elements are a void element and do not need closing tags. --&gt;\n &lt;input&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#38","title":"38","text":"<pre><code>&lt;!-- added text to type attribute to allow user input --&gt;\n &lt;input type=\"text\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#39","title":"39","text":"<pre><code>&lt;!-- In order for a form's data to be accessed by the location specified in the action attribute, you must give the text field a name attribute and assign it a value to represent the data being submitted. --&gt;\n &lt;input type=\"text\" name=\"catphotourl\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#40","title":"40","text":"<pre><code>&lt;!-- Placeholder text is used to give people a hint about what kind of information to enter into an input.\n\nHere is an example of an input element with a placeholder set to Ex. Jane Doe: --&gt;\n &lt;input type=\"text\" name=\"catphotourl\" placeholder=\"cat photo URL\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#41","title":"41","text":"<pre><code>&lt;!-- To prevent a user from submitting your form when required information is missing, you need to add the required attribute to an input element. There's no need to set a value to the required attribute. Instead, just add the word required to the input element, making sure there is space between it and other attributes. --&gt;\n &lt;input type=\"text\" name=\"catphotourl\" placeholder=\"cat photo URL\" required=\"\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#42","title":"42","text":"<pre><code>&lt;!-- The button element is used to create a clickable button. text between the button tags comes up on the button --&gt;\n &lt;button&gt; Submit &lt;/button&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#43","title":"43","text":"<pre><code>&lt;!-- Even though you added your button below the text input, they appear next to each other on the page. That's because both input and button elements are inline elements, which don't appear on new lines.\n\nThe button you added will submit the form by default. However, relying on default behavior may cause confusion. Add the type attribute with the value submit to the button to make it clear that it is a submit button. --&gt;\n &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#44","title":"44","text":"<pre><code>&lt;!-- You can use radio buttons for questions where you want only one answer out of multiple options.\n\nHere is an example of a radio button with the option of cat:\n\nExample Code\n&lt;input type=\"radio\"&gt; cat\nRemember that an input element is a void element. --&gt;\n &lt;input type=\"radio\"&gt; Indoor\n          &lt;input type=\"text\" name=\"catphotourl\" placeholder=\"cat photo URL\" required&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#45","title":"45","text":"<pre><code>&lt;!-- label elements are used to help associate the text for an input element with the input element itself (especially for assistive technologies like screen readers).\n\nHere is an example of a label element with a radio button:\n\nExample Code\n&lt;label&gt;&lt;input type=\"radio\"&gt; cat&lt;/label&gt; --&gt;\n  &lt;label&gt;&lt;input type=\"radio\"&gt; Indoor &lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#46","title":"46","text":"<pre><code>&lt;!-- The id attribute is used to identify specific HTML elements. Each id attribute's value must be unique from all other id values for the entire page.\n\nHere is an example of an input element with an id attribute:\n\nExample Code\n&lt;input id=\"email\"&gt; --&gt;\n  &lt;label&gt;&lt;input type=\"radio\" id=\"indoor\"&gt; Indoor&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#47","title":"47","text":"<pre><code>&lt;!-- created another label radio as outdoor --&gt;\n  &lt;label&gt;&lt;input id=\"indoor\" type=\"radio\"&gt; Indoor&lt;/label&gt;\n  &lt;label&gt;&lt;input id=\"outdoor\" type=\"radio\"&gt; Outdoor&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#48","title":"48","text":"<pre><code>&lt;!-- Notice that both radio buttons can be selected at the same time. To make it so selecting one radio button automatically deselects the other, both buttons must have a name attribute with the same value.\n\nHere is an example of two radio buttons with the same name attribute:\n\nExample Code\n&lt;input type=\"radio\" name=\"meal\"&gt; Breakfast\n&lt;input type=\"radio\" name=\"meal\"&gt; Lunch --&gt;\n  &lt;label&gt;&lt;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"&gt; Indoor&lt;/label&gt;\n          &lt;label&gt;&lt;input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"&gt; Outdoor&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#49","title":"49","text":"<pre><code>&lt;!-- If you select the Indoor radio button and submit the form, the form data for the button is based on its name and value attributes. Since your radio buttons do not have a value attribute, the form data will include indoor-outdoor=on, which is not useful when you have multiple buttons.\n\nAdd a value attribute to both radio buttons. For convenience, set the button's value attribute to the same value as its id attribute. --&gt;\n  &lt;label&gt;&lt;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"&gt; Indoor&lt;/label&gt;\n          &lt;label&gt;&lt;input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"&gt; Outdoor&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#50","title":"50","text":"<pre><code>&lt;!-- The fieldset element is used to group related inputs and labels together in a web form. fieldset elements are block-level elements, meaning that they appear on a new line. --&gt;\n  &lt;fieldset&gt;\n          &lt;label&gt;&lt;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"&gt; Indoor&lt;/label&gt;\n          &lt;label&gt;&lt;input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"&gt; Outdoor&lt;/label&gt;\n        &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#51","title":"51","text":"<pre><code>&lt;!-- The legend element acts as a caption for the content in the fieldset element. It gives users context about what they should enter into that part of the form.\n\nAdd a legend element with the text Is your cat an indoor or outdoor cat? above both of the radio buttons. --&gt;\n  &lt;fieldset&gt;\n            &lt;legend&gt; Is your cat an indoor or outdoor cat? &lt;/legend&gt;\n            &lt;label&gt;&lt;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"&gt; Indoor&lt;/label&gt;\n            &lt;label&gt;&lt;input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"&gt; Outdoor&lt;/label&gt;\n          &lt;/fieldset&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#52","title":"52","text":"<pre><code>&lt;!-- added a new fieldset element under the first one to add a new form --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#53","title":"53","text":"<pre><code>&lt;!-- added a legend in the field set with text --&gt; \n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#54","title":"54","text":"<pre><code>&lt;!-- Forms commonly use checkboxes for questions that may have more than one answer. The input element with a type attribute set to checkbox creates a checkbox. --&gt; \n          &lt;input type=\"checkbox\"&gt; Loving\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#55","title":"55","text":"<pre><code>&lt;!-- added id attribute loving --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#56","title":"56","text":"<pre><code>&lt;!-- There's another way to associate an input element's text with the element itself. You can nest the text within a label element and add a for attribute with the same value as the input element's id attribute.\n\nGiven an input element as below:\n\nExample Code\n&lt;input id=\"breakfast\" type=\"radio\" name=\"meal\" value=\"breakfast\"&gt;\nAn example of a label element that is associated to this input element is:\n\nExample Code\n&lt;label for=\"breakfast\"&gt;Breakfast&lt;/label&gt; --&gt;\n\n&lt;input id=\"loving\" type=\"checkbox\"&gt; &lt;label for=\"loving\"&gt;Loving&lt;/label&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#57","title":"57","text":"<pre><code>&lt;!-- added attribute name to input tag with value personality --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#58","title":"58","text":"<pre><code>&lt;!-- added another input tag for a new checkbox for lazy, with the same name value personality but different id and for attribute values --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#59","title":"59","text":"<pre><code>&lt;!-- added another checkboc for energetic --&gt;\n\n ```\n\n## 60\n\n```html\n\n&lt;!-- added value attribute to each checkbox input element with its respective id value --&gt;\n\n ```\n\n## 61\n\n```html\n\n&lt;!-- added checked attribute after input tag to check radio and checkbox by default, only the first options --&gt;\n\n&lt;input checked id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"&gt; &lt;label for=\"loving\"&gt;Loving&lt;/label&gt;\n\n ```\n\n## 62\n\n```html\n\n&lt;footer&gt;&lt;/footer&gt;\n\n ```\n\n## 63\n\n```html\n\n&lt;footer&gt;\n      &lt;p&gt; No Copyright - freeCodeCamp.org &lt;/p&gt;\n    &lt;/footer&gt;\n\n ```\n\n## 64\n\n```html\n  &lt;!-- added checked attribute after input tag to check radio and checkbox by default, only the first options --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#65","title":"65","text":"<pre><code>  &lt;!-- The head element is used to contain metadata about the document, such as its title, links to stylesheets, and scripts. Metadata is information about the page that isn't displayed directly on the page. located above the body element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#66","title":"66","text":"<pre><code>&lt;!-- The head element is used to contain metadata about the document, such as its title, links to stylesheets, and scripts. Metadata is information about the page that isn't displayed directly on the page. located above the body element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#67","title":"67","text":"<pre><code>&lt;!-- The title element determines what browsers show in the title bar or tab for the page. located inside the head element --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#68","title":"68","text":"<pre><code>&lt;!-- All pages should begin with &lt;!DOCTYPE html&gt;. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.\n\n&lt;!DOCTYPE html&gt; tells browsers that the document is an HTML5 document which is the latest version of HTML.\n\nAdd this declaration as the first line of the code. --&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/CatPhotoApp.html#69","title":"69","text":"<pre><code>&lt;!-- You can set browser behavior by adding meta elements in the head. Here's an example:\n\nExample Code\n&lt;meta attribute=\"value\"&gt;\nInside the head element, nest a meta element with an attribute named charset. Set to the value to utf-8 which tells the browser how to encode characters for the page.\n\nNote that the meta element is a void element. --&gt;\n&lt;meta charset=\"utf-8\"&gt;\n</code></pre>"},{"location":"Responsive%20Web%20Design%20Notes/Surveyform.html","title":"Building a Survey form","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt; Survey Form &lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 id=\"title\"&gt;Survey Form&lt;/h1&gt;\n  &lt;p id=\"description\"&gt; Thank you for taking the time to help us improve the platform&lt;/p&gt;\n  &lt;form method=\"post\" action=\"https://register-demo.freecodecamp.org\" id=\"survey-form\"&gt;\n  &lt;fieldset&gt;\n        &lt;label for=\"name-label\" id=\"name-label\"&gt;Name &lt;input id=\"name\" name=\"name-label\" type=\"text\" placeholder=\"Enter your name\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"email-label\" id=\"email-label\"&gt;Email &lt;input id=\"email\" name=\"email-label\" type=\"email\" placeholder=\"Enter your email\" required /&gt;&lt;/label&gt;\n        &lt;label for=\"number-label\" id=\"number-label\"&gt;Age (optional) &lt;input id=\"number\" type=\"number\" name=\"number-label\" min=\"10\" max=\"99\" placeholder=\"Age\" /&gt;&lt;/label&gt;\n        &lt;label for=\"dropdown\"&gt; Which option best describes your current role?\n          &lt;select id=\"dropdown\" name=\"dropdown\"&gt;\n            &lt;option value=\"\"&gt;(Select current role)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;Student&lt;/option&gt;\n            &lt;option value=\"2\"&gt;Full Time Job&lt;/option&gt;\n            &lt;option value=\"3\"&gt;Full Time Learner&lt;/option&gt;\n            &lt;option value=\"5\"&gt;Prefer not to say&lt;/option&gt;\n            &lt;option value=\"5\"&gt;Other&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n  &lt;/fieldset&gt;\n  &lt;fieldset&gt;\n        &lt;legend&gt;Would you recommend freeCodeCamp to a friend?&lt;/legend&gt;\n        &lt;label for=\"choice\"&gt;&lt;input id=\"name\" type=\"radio\" name=\"choice\" class=\"inline\" value=\"1\" checked /&gt; Definitely&lt;/label&gt;\n        &lt;label for=\"choice\"&gt;&lt;input id=\"name\" type=\"radio\" name=\"choice\" class=\"inline\" value=\"2\" /&gt; Maybe&lt;/label&gt;\n        &lt;label for=\"choice\"&gt;&lt;input id=\"name\" type=\"radio\" name=\"choice\" class=\"inline\" value=\"3\" /&gt; Not sure&lt;/label&gt;\n      &lt;/fieldset&gt;\n&lt;fieldset&gt;\n  &lt;label for=\"option\"&gt; What is your favorite feature of freeCodeCamp?\n          &lt;select id=\"option\" name=\"option\"&gt;\n            &lt;option value=\"\"&gt;(Select an option)&lt;/option&gt;\n            &lt;option value=\"1\"&gt;Challenges&lt;/option&gt;\n            &lt;option value=\"2\"&gt;Projects&lt;/option&gt;\n            &lt;option value=\"3\"&gt;Community&lt;/option&gt;\n            &lt;option value=\"5\"&gt;Open Source&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n&lt;/fieldset&gt;\n&lt;fieldset&gt;\n  &lt;legend&gt;What would you like to see improved? (Check all that apply)&lt;/legend&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;input id=\"Front-end Projects\" type=\"checkbox\" name=\"choices\" value=\"Front-end Projects\" class=\"inline\" checked /&gt;&lt;label for=\"Front-end Projects\" class=\"inline\"&gt;Front-end Projects&lt;/label&gt; &lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Back-end Projects\" type=\"checkbox\" name=\"choices\" value=\"Back-end Projects\" class=\"inline\" /&gt; &lt;label for=\"Back-end Projects\" class=\"inline\"&gt;Back-end Projects&lt;/label&gt; &lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Data Visualization\" type=\"checkbox\" name=\"choices\" value=\"Data Visualization\" class=\"inline\" /&gt; &lt;label for=\"Data Visualization\" class=\"inline\"&gt;Data Visualization&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Challenges\" type=\"checkbox\" name=\"choices\" value=\"Challenges\" class=\"inline\" /&gt; &lt;label for=\"Challenges\" class=\"inline\"&gt;Challenges&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Open Source Community\" type=\"checkbox\" name=\"choices\" value=\"Open Source Community\" class=\"inline\" /&gt; &lt;label for=\"Open Source Community\" class=\"inline\"&gt;Open Source Community&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Gitter help rooms\" type=\"checkbox\" name=\"choices\" value=\"Gitter help rooms\" class=\"inline\" /&gt; &lt;label for=\"Gitter help rooms\" class=\"inline\"&gt;Gitter help rooms&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Videos\" type=\"checkbox\" name=\"choices\" value=\"Videos\" class=\"inline\" /&gt; &lt;label for=\"Videos\" class=\"inline\"&gt;Videos&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"City Meetups\" type=\"checkbox\" name=\"choices\" value=\"City Meetups\" class=\"inline\" /&gt; &lt;label for=\"City Meetups\" class=\"inline\"&gt;City Meetups&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Wiki\" type=\"checkbox\" name=\"choices\" value=\"Wiki\" class=\"inline\" /&gt; &lt;label for=\"Wiki\" class=\"inline\"&gt;Wiki&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Forum\" type=\"checkbox\" name=\"choices\" value=\"Forum\" class=\"inline\" /&gt; &lt;label for=\"Forum\" class=\"inline\"&gt;Forum&lt;/label&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;input id=\"Additional Courses\" type=\"checkbox\" name=\"choices\" value=\"Additional Courses\" class=\"inline\" /&gt; &lt;label for=\"Additional Courses\" class=\"inline\"&gt;Additional Courses&lt;/label&gt;&lt;/li&gt;\n  &lt;/ul&gt;  \n&lt;/fieldset&gt;\n&lt;fieldset&gt;\n&lt;label for=\"bio\"&gt;Any comments or suggestions?\n  &lt;textarea id=\"bio\" name=\"bio\" rows=\"4\" cols=\"30\"    placeholder=\"Enter your comment here...\"&gt;&lt;/textarea&gt;\n&lt;/label&gt;\n&lt;input type=\"submit\" id =\"submit\" value=\"Submit\" /&gt;\n&lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>body {\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  background-color: #1b1b32;\n  color: #f5f6f7;\n  font-family: Tahoma;\n  font-size: 16px;\n}\n\nh1, p {\n  margin: 1em auto;\n  text-align: center;\n}\n\nform {\n  width: 60vw;\n  max-width: 500px;\n  min-width: 300px;\n  margin: 0 auto;\n  padding-bottom: 2em;\n}\n\nfieldset {\n  border: none;\n  padding: 2rem 0;\n  border-bottom: 3px solid #3b3b4f;\n}\n\nfieldset:last-of-type {\n  border-bottom: none;\n}\n\nlabel {\n  display: block;\n  margin: 0.5rem 0;\n}\n\ninput,\ntextarea,\nselect {\n  margin: 10px 0 0 0;\n  width: 100%;\n  min-height: 2em;\n}\n\ninput, textarea {\n  background-color: #0a0a23;\n  border: 1px solid #0a0a23;\n  color: #ffffff;\n}\n\n.inline {\n  width: unset;\n  margin: 0 0.5em 0 0;\n  vertical-align: middle;\n}\n\ninput[type=\"submit\"] {\n  display: block;\n  width: 60%;\n  margin: 1em auto;\n  height: 2em;\n  font-size: 1.1rem;\n  background-color: #3b3b4f;\n  border-color: white;\n  min-width: 300px;\n}\n\ninput[type=\"file\"] {\n  padding: 1px 2px;\n}\n\n.inline{\n  display: inline; \n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n</code></pre>"}]}